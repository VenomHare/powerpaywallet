// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String
  number           String            @unique
  password         String
  securityPin      String
  failedPinTries   Int               @default(0)
  lastFailedPinTry DateTime?
  pfpPublicId      String?            @unique
  pfp              Cloudinary_images? @relation(fields: [pfpPublicId], references: [public_id])

  Balance             Balance[]
  Transactions        Transactions[]
  IncomingTransaction WalletTransfers[] @relation(name: "IncomingTransaction")
  OutgoingTransaction WalletTransfers[] @relation(name: "OutgoingTransaction")
}

model Cloudinary_images {
  public_id String @id
  url       String
  User      User?

  @@map("cloudinary_images")
}

model Merchant {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  auth_type AuthType
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int  @default(0)
  locked Int  @default(0)
  user   User @relation(fields: [userId], references: [id])

  @@map("balance")
}

model Transactions {
  id              Int             @id @default(autoincrement())
  status          Status
  statement       String
  token           String          @unique
  provider        String
  amount          Int
  transactionType TransactionType
  startTime       DateTime        @default(now())
  upatedAt        DateTime        @default(now())
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
}

model WalletTransfers {
  id        Int      @id @default(autoincrement())
  from      Int
  FromUser  User     @relation(name: "OutgoingTransaction", fields: [from], references: [id])
  to        Int
  ToUser    User     @relation(name: "IncomingTransaction", fields: [to], references: [id])
  amount    Int
  status    Status
  startedAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum AuthType {
  Google
  Github
}

enum Status {
  Success
  Failure
  Processing
}

enum TransactionType {
  Debit
  Credit
}
