
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WalletTransfers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model WalletTransfers
 * 
 */
export type WalletTransfersModel = runtime.Types.Result.DefaultSelection<Prisma.$WalletTransfersPayload>

export type AggregateWalletTransfers = {
  _count: WalletTransfersCountAggregateOutputType | null
  _avg: WalletTransfersAvgAggregateOutputType | null
  _sum: WalletTransfersSumAggregateOutputType | null
  _min: WalletTransfersMinAggregateOutputType | null
  _max: WalletTransfersMaxAggregateOutputType | null
}

export type WalletTransfersAvgAggregateOutputType = {
  id: number | null
  from: number | null
  to: number | null
  amount: number | null
}

export type WalletTransfersSumAggregateOutputType = {
  id: number | null
  from: number | null
  to: number | null
  amount: number | null
}

export type WalletTransfersMinAggregateOutputType = {
  id: number | null
  from: number | null
  to: number | null
  amount: number | null
  status: $Enums.Status | null
  startedAt: Date | null
  updatedAt: Date | null
}

export type WalletTransfersMaxAggregateOutputType = {
  id: number | null
  from: number | null
  to: number | null
  amount: number | null
  status: $Enums.Status | null
  startedAt: Date | null
  updatedAt: Date | null
}

export type WalletTransfersCountAggregateOutputType = {
  id: number
  from: number
  to: number
  amount: number
  status: number
  startedAt: number
  updatedAt: number
  _all: number
}


export type WalletTransfersAvgAggregateInputType = {
  id?: true
  from?: true
  to?: true
  amount?: true
}

export type WalletTransfersSumAggregateInputType = {
  id?: true
  from?: true
  to?: true
  amount?: true
}

export type WalletTransfersMinAggregateInputType = {
  id?: true
  from?: true
  to?: true
  amount?: true
  status?: true
  startedAt?: true
  updatedAt?: true
}

export type WalletTransfersMaxAggregateInputType = {
  id?: true
  from?: true
  to?: true
  amount?: true
  status?: true
  startedAt?: true
  updatedAt?: true
}

export type WalletTransfersCountAggregateInputType = {
  id?: true
  from?: true
  to?: true
  amount?: true
  status?: true
  startedAt?: true
  updatedAt?: true
  _all?: true
}

export type WalletTransfersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WalletTransfers to aggregate.
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransfers to fetch.
   */
  orderBy?: Prisma.WalletTransfersOrderByWithRelationInput | Prisma.WalletTransfersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WalletTransfersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WalletTransfers
  **/
  _count?: true | WalletTransfersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WalletTransfersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WalletTransfersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WalletTransfersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WalletTransfersMaxAggregateInputType
}

export type GetWalletTransfersAggregateType<T extends WalletTransfersAggregateArgs> = {
      [P in keyof T & keyof AggregateWalletTransfers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWalletTransfers[P]>
    : Prisma.GetScalarType<T[P], AggregateWalletTransfers[P]>
}




export type WalletTransfersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WalletTransfersWhereInput
  orderBy?: Prisma.WalletTransfersOrderByWithAggregationInput | Prisma.WalletTransfersOrderByWithAggregationInput[]
  by: Prisma.WalletTransfersScalarFieldEnum[] | Prisma.WalletTransfersScalarFieldEnum
  having?: Prisma.WalletTransfersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WalletTransfersCountAggregateInputType | true
  _avg?: WalletTransfersAvgAggregateInputType
  _sum?: WalletTransfersSumAggregateInputType
  _min?: WalletTransfersMinAggregateInputType
  _max?: WalletTransfersMaxAggregateInputType
}

export type WalletTransfersGroupByOutputType = {
  id: number
  from: number
  to: number
  amount: number
  status: $Enums.Status
  startedAt: Date
  updatedAt: Date
  _count: WalletTransfersCountAggregateOutputType | null
  _avg: WalletTransfersAvgAggregateOutputType | null
  _sum: WalletTransfersSumAggregateOutputType | null
  _min: WalletTransfersMinAggregateOutputType | null
  _max: WalletTransfersMaxAggregateOutputType | null
}

type GetWalletTransfersGroupByPayload<T extends WalletTransfersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WalletTransfersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WalletTransfersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WalletTransfersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WalletTransfersGroupByOutputType[P]>
      }
    >
  >



export type WalletTransfersWhereInput = {
  AND?: Prisma.WalletTransfersWhereInput | Prisma.WalletTransfersWhereInput[]
  OR?: Prisma.WalletTransfersWhereInput[]
  NOT?: Prisma.WalletTransfersWhereInput | Prisma.WalletTransfersWhereInput[]
  id?: Prisma.IntFilter<"WalletTransfers"> | number
  from?: Prisma.IntFilter<"WalletTransfers"> | number
  to?: Prisma.IntFilter<"WalletTransfers"> | number
  amount?: Prisma.IntFilter<"WalletTransfers"> | number
  status?: Prisma.EnumStatusFilter<"WalletTransfers"> | $Enums.Status
  startedAt?: Prisma.DateTimeFilter<"WalletTransfers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletTransfers"> | Date | string
  FromUser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  ToUser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type WalletTransfersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  FromUser?: Prisma.UserOrderByWithRelationInput
  ToUser?: Prisma.UserOrderByWithRelationInput
}

export type WalletTransfersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.WalletTransfersWhereInput | Prisma.WalletTransfersWhereInput[]
  OR?: Prisma.WalletTransfersWhereInput[]
  NOT?: Prisma.WalletTransfersWhereInput | Prisma.WalletTransfersWhereInput[]
  from?: Prisma.IntFilter<"WalletTransfers"> | number
  to?: Prisma.IntFilter<"WalletTransfers"> | number
  amount?: Prisma.IntFilter<"WalletTransfers"> | number
  status?: Prisma.EnumStatusFilter<"WalletTransfers"> | $Enums.Status
  startedAt?: Prisma.DateTimeFilter<"WalletTransfers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletTransfers"> | Date | string
  FromUser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  ToUser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type WalletTransfersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WalletTransfersCountOrderByAggregateInput
  _avg?: Prisma.WalletTransfersAvgOrderByAggregateInput
  _max?: Prisma.WalletTransfersMaxOrderByAggregateInput
  _min?: Prisma.WalletTransfersMinOrderByAggregateInput
  _sum?: Prisma.WalletTransfersSumOrderByAggregateInput
}

export type WalletTransfersScalarWhereWithAggregatesInput = {
  AND?: Prisma.WalletTransfersScalarWhereWithAggregatesInput | Prisma.WalletTransfersScalarWhereWithAggregatesInput[]
  OR?: Prisma.WalletTransfersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WalletTransfersScalarWhereWithAggregatesInput | Prisma.WalletTransfersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WalletTransfers"> | number
  from?: Prisma.IntWithAggregatesFilter<"WalletTransfers"> | number
  to?: Prisma.IntWithAggregatesFilter<"WalletTransfers"> | number
  amount?: Prisma.IntWithAggregatesFilter<"WalletTransfers"> | number
  status?: Prisma.EnumStatusWithAggregatesFilter<"WalletTransfers"> | $Enums.Status
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"WalletTransfers"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WalletTransfers"> | Date | string
}

export type WalletTransfersCreateInput = {
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
  FromUser: Prisma.UserCreateNestedOneWithoutOutgoingTransactionInput
  ToUser: Prisma.UserCreateNestedOneWithoutIncomingTransactionInput
}

export type WalletTransfersUncheckedCreateInput = {
  id?: number
  from: number
  to: number
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransfersUpdateInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  FromUser?: Prisma.UserUpdateOneRequiredWithoutOutgoingTransactionNestedInput
  ToUser?: Prisma.UserUpdateOneRequiredWithoutIncomingTransactionNestedInput
}

export type WalletTransfersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from?: Prisma.IntFieldUpdateOperationsInput | number
  to?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransfersCreateManyInput = {
  id?: number
  from: number
  to: number
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransfersUpdateManyMutationInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransfersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from?: Prisma.IntFieldUpdateOperationsInput | number
  to?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransfersListRelationFilter = {
  every?: Prisma.WalletTransfersWhereInput
  some?: Prisma.WalletTransfersWhereInput
  none?: Prisma.WalletTransfersWhereInput
}

export type WalletTransfersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WalletTransfersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletTransfersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
}

export type WalletTransfersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletTransfersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletTransfersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  from?: Prisma.SortOrder
  to?: Prisma.SortOrder
  amount?: Prisma.SortOrder
}

export type WalletTransfersCreateNestedManyWithoutToUserInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutToUserInput, Prisma.WalletTransfersUncheckedCreateWithoutToUserInput> | Prisma.WalletTransfersCreateWithoutToUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutToUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutToUserInput | Prisma.WalletTransfersCreateOrConnectWithoutToUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyToUserInputEnvelope
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
}

export type WalletTransfersCreateNestedManyWithoutFromUserInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutFromUserInput, Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput> | Prisma.WalletTransfersCreateWithoutFromUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput | Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyFromUserInputEnvelope
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
}

export type WalletTransfersUncheckedCreateNestedManyWithoutToUserInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutToUserInput, Prisma.WalletTransfersUncheckedCreateWithoutToUserInput> | Prisma.WalletTransfersCreateWithoutToUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutToUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutToUserInput | Prisma.WalletTransfersCreateOrConnectWithoutToUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyToUserInputEnvelope
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
}

export type WalletTransfersUncheckedCreateNestedManyWithoutFromUserInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutFromUserInput, Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput> | Prisma.WalletTransfersCreateWithoutFromUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput | Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyFromUserInputEnvelope
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
}

export type WalletTransfersUpdateManyWithoutToUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutToUserInput, Prisma.WalletTransfersUncheckedCreateWithoutToUserInput> | Prisma.WalletTransfersCreateWithoutToUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutToUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutToUserInput | Prisma.WalletTransfersCreateOrConnectWithoutToUserInput[]
  upsert?: Prisma.WalletTransfersUpsertWithWhereUniqueWithoutToUserInput | Prisma.WalletTransfersUpsertWithWhereUniqueWithoutToUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyToUserInputEnvelope
  set?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  disconnect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  delete?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  update?: Prisma.WalletTransfersUpdateWithWhereUniqueWithoutToUserInput | Prisma.WalletTransfersUpdateWithWhereUniqueWithoutToUserInput[]
  updateMany?: Prisma.WalletTransfersUpdateManyWithWhereWithoutToUserInput | Prisma.WalletTransfersUpdateManyWithWhereWithoutToUserInput[]
  deleteMany?: Prisma.WalletTransfersScalarWhereInput | Prisma.WalletTransfersScalarWhereInput[]
}

export type WalletTransfersUpdateManyWithoutFromUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutFromUserInput, Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput> | Prisma.WalletTransfersCreateWithoutFromUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput | Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput[]
  upsert?: Prisma.WalletTransfersUpsertWithWhereUniqueWithoutFromUserInput | Prisma.WalletTransfersUpsertWithWhereUniqueWithoutFromUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyFromUserInputEnvelope
  set?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  disconnect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  delete?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  update?: Prisma.WalletTransfersUpdateWithWhereUniqueWithoutFromUserInput | Prisma.WalletTransfersUpdateWithWhereUniqueWithoutFromUserInput[]
  updateMany?: Prisma.WalletTransfersUpdateManyWithWhereWithoutFromUserInput | Prisma.WalletTransfersUpdateManyWithWhereWithoutFromUserInput[]
  deleteMany?: Prisma.WalletTransfersScalarWhereInput | Prisma.WalletTransfersScalarWhereInput[]
}

export type WalletTransfersUncheckedUpdateManyWithoutToUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutToUserInput, Prisma.WalletTransfersUncheckedCreateWithoutToUserInput> | Prisma.WalletTransfersCreateWithoutToUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutToUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutToUserInput | Prisma.WalletTransfersCreateOrConnectWithoutToUserInput[]
  upsert?: Prisma.WalletTransfersUpsertWithWhereUniqueWithoutToUserInput | Prisma.WalletTransfersUpsertWithWhereUniqueWithoutToUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyToUserInputEnvelope
  set?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  disconnect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  delete?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  update?: Prisma.WalletTransfersUpdateWithWhereUniqueWithoutToUserInput | Prisma.WalletTransfersUpdateWithWhereUniqueWithoutToUserInput[]
  updateMany?: Prisma.WalletTransfersUpdateManyWithWhereWithoutToUserInput | Prisma.WalletTransfersUpdateManyWithWhereWithoutToUserInput[]
  deleteMany?: Prisma.WalletTransfersScalarWhereInput | Prisma.WalletTransfersScalarWhereInput[]
}

export type WalletTransfersUncheckedUpdateManyWithoutFromUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletTransfersCreateWithoutFromUserInput, Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput> | Prisma.WalletTransfersCreateWithoutFromUserInput[] | Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput[]
  connectOrCreate?: Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput | Prisma.WalletTransfersCreateOrConnectWithoutFromUserInput[]
  upsert?: Prisma.WalletTransfersUpsertWithWhereUniqueWithoutFromUserInput | Prisma.WalletTransfersUpsertWithWhereUniqueWithoutFromUserInput[]
  createMany?: Prisma.WalletTransfersCreateManyFromUserInputEnvelope
  set?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  disconnect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  delete?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  connect?: Prisma.WalletTransfersWhereUniqueInput | Prisma.WalletTransfersWhereUniqueInput[]
  update?: Prisma.WalletTransfersUpdateWithWhereUniqueWithoutFromUserInput | Prisma.WalletTransfersUpdateWithWhereUniqueWithoutFromUserInput[]
  updateMany?: Prisma.WalletTransfersUpdateManyWithWhereWithoutFromUserInput | Prisma.WalletTransfersUpdateManyWithWhereWithoutFromUserInput[]
  deleteMany?: Prisma.WalletTransfersScalarWhereInput | Prisma.WalletTransfersScalarWhereInput[]
}

export type WalletTransfersCreateWithoutToUserInput = {
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
  FromUser: Prisma.UserCreateNestedOneWithoutOutgoingTransactionInput
}

export type WalletTransfersUncheckedCreateWithoutToUserInput = {
  id?: number
  from: number
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransfersCreateOrConnectWithoutToUserInput = {
  where: Prisma.WalletTransfersWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletTransfersCreateWithoutToUserInput, Prisma.WalletTransfersUncheckedCreateWithoutToUserInput>
}

export type WalletTransfersCreateManyToUserInputEnvelope = {
  data: Prisma.WalletTransfersCreateManyToUserInput | Prisma.WalletTransfersCreateManyToUserInput[]
  skipDuplicates?: boolean
}

export type WalletTransfersCreateWithoutFromUserInput = {
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
  ToUser: Prisma.UserCreateNestedOneWithoutIncomingTransactionInput
}

export type WalletTransfersUncheckedCreateWithoutFromUserInput = {
  id?: number
  to: number
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransfersCreateOrConnectWithoutFromUserInput = {
  where: Prisma.WalletTransfersWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletTransfersCreateWithoutFromUserInput, Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput>
}

export type WalletTransfersCreateManyFromUserInputEnvelope = {
  data: Prisma.WalletTransfersCreateManyFromUserInput | Prisma.WalletTransfersCreateManyFromUserInput[]
  skipDuplicates?: boolean
}

export type WalletTransfersUpsertWithWhereUniqueWithoutToUserInput = {
  where: Prisma.WalletTransfersWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletTransfersUpdateWithoutToUserInput, Prisma.WalletTransfersUncheckedUpdateWithoutToUserInput>
  create: Prisma.XOR<Prisma.WalletTransfersCreateWithoutToUserInput, Prisma.WalletTransfersUncheckedCreateWithoutToUserInput>
}

export type WalletTransfersUpdateWithWhereUniqueWithoutToUserInput = {
  where: Prisma.WalletTransfersWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletTransfersUpdateWithoutToUserInput, Prisma.WalletTransfersUncheckedUpdateWithoutToUserInput>
}

export type WalletTransfersUpdateManyWithWhereWithoutToUserInput = {
  where: Prisma.WalletTransfersScalarWhereInput
  data: Prisma.XOR<Prisma.WalletTransfersUpdateManyMutationInput, Prisma.WalletTransfersUncheckedUpdateManyWithoutToUserInput>
}

export type WalletTransfersScalarWhereInput = {
  AND?: Prisma.WalletTransfersScalarWhereInput | Prisma.WalletTransfersScalarWhereInput[]
  OR?: Prisma.WalletTransfersScalarWhereInput[]
  NOT?: Prisma.WalletTransfersScalarWhereInput | Prisma.WalletTransfersScalarWhereInput[]
  id?: Prisma.IntFilter<"WalletTransfers"> | number
  from?: Prisma.IntFilter<"WalletTransfers"> | number
  to?: Prisma.IntFilter<"WalletTransfers"> | number
  amount?: Prisma.IntFilter<"WalletTransfers"> | number
  status?: Prisma.EnumStatusFilter<"WalletTransfers"> | $Enums.Status
  startedAt?: Prisma.DateTimeFilter<"WalletTransfers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletTransfers"> | Date | string
}

export type WalletTransfersUpsertWithWhereUniqueWithoutFromUserInput = {
  where: Prisma.WalletTransfersWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletTransfersUpdateWithoutFromUserInput, Prisma.WalletTransfersUncheckedUpdateWithoutFromUserInput>
  create: Prisma.XOR<Prisma.WalletTransfersCreateWithoutFromUserInput, Prisma.WalletTransfersUncheckedCreateWithoutFromUserInput>
}

export type WalletTransfersUpdateWithWhereUniqueWithoutFromUserInput = {
  where: Prisma.WalletTransfersWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletTransfersUpdateWithoutFromUserInput, Prisma.WalletTransfersUncheckedUpdateWithoutFromUserInput>
}

export type WalletTransfersUpdateManyWithWhereWithoutFromUserInput = {
  where: Prisma.WalletTransfersScalarWhereInput
  data: Prisma.XOR<Prisma.WalletTransfersUpdateManyMutationInput, Prisma.WalletTransfersUncheckedUpdateManyWithoutFromUserInput>
}

export type WalletTransfersCreateManyToUserInput = {
  id?: number
  from: number
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransfersCreateManyFromUserInput = {
  id?: number
  to: number
  amount: number
  status: $Enums.Status
  startedAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransfersUpdateWithoutToUserInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  FromUser?: Prisma.UserUpdateOneRequiredWithoutOutgoingTransactionNestedInput
}

export type WalletTransfersUncheckedUpdateWithoutToUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransfersUncheckedUpdateManyWithoutToUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  from?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransfersUpdateWithoutFromUserInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ToUser?: Prisma.UserUpdateOneRequiredWithoutIncomingTransactionNestedInput
}

export type WalletTransfersUncheckedUpdateWithoutFromUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  to?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransfersUncheckedUpdateManyWithoutFromUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  to?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WalletTransfersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  from?: boolean
  to?: boolean
  amount?: boolean
  status?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  FromUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ToUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletTransfers"]>

export type WalletTransfersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  from?: boolean
  to?: boolean
  amount?: boolean
  status?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  FromUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ToUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletTransfers"]>

export type WalletTransfersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  from?: boolean
  to?: boolean
  amount?: boolean
  status?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  FromUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ToUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletTransfers"]>

export type WalletTransfersSelectScalar = {
  id?: boolean
  from?: boolean
  to?: boolean
  amount?: boolean
  status?: boolean
  startedAt?: boolean
  updatedAt?: boolean
}

export type WalletTransfersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "from" | "to" | "amount" | "status" | "startedAt" | "updatedAt", ExtArgs["result"]["walletTransfers"]>
export type WalletTransfersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FromUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ToUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WalletTransfersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FromUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ToUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WalletTransfersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FromUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ToUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $WalletTransfersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WalletTransfers"
  objects: {
    FromUser: Prisma.$UserPayload<ExtArgs>
    ToUser: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    from: number
    to: number
    amount: number
    status: $Enums.Status
    startedAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["walletTransfers"]>
  composites: {}
}

export type WalletTransfersGetPayload<S extends boolean | null | undefined | WalletTransfersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload, S>

export type WalletTransfersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WalletTransfersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WalletTransfersCountAggregateInputType | true
  }

export interface WalletTransfersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletTransfers'], meta: { name: 'WalletTransfers' } }
  /**
   * Find zero or one WalletTransfers that matches the filter.
   * @param {WalletTransfersFindUniqueArgs} args - Arguments to find a WalletTransfers
   * @example
   * // Get one WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WalletTransfersFindUniqueArgs>(args: Prisma.SelectSubset<T, WalletTransfersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WalletTransfers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WalletTransfersFindUniqueOrThrowArgs} args - Arguments to find a WalletTransfers
   * @example
   * // Get one WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WalletTransfersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WalletTransfersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WalletTransfers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersFindFirstArgs} args - Arguments to find a WalletTransfers
   * @example
   * // Get one WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WalletTransfersFindFirstArgs>(args?: Prisma.SelectSubset<T, WalletTransfersFindFirstArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WalletTransfers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersFindFirstOrThrowArgs} args - Arguments to find a WalletTransfers
   * @example
   * // Get one WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WalletTransfersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WalletTransfersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WalletTransfers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.findMany()
   * 
   * // Get first 10 WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const walletTransfersWithIdOnly = await prisma.walletTransfers.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WalletTransfersFindManyArgs>(args?: Prisma.SelectSubset<T, WalletTransfersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WalletTransfers.
   * @param {WalletTransfersCreateArgs} args - Arguments to create a WalletTransfers.
   * @example
   * // Create one WalletTransfers
   * const WalletTransfers = await prisma.walletTransfers.create({
   *   data: {
   *     // ... data to create a WalletTransfers
   *   }
   * })
   * 
   */
  create<T extends WalletTransfersCreateArgs>(args: Prisma.SelectSubset<T, WalletTransfersCreateArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WalletTransfers.
   * @param {WalletTransfersCreateManyArgs} args - Arguments to create many WalletTransfers.
   * @example
   * // Create many WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WalletTransfersCreateManyArgs>(args?: Prisma.SelectSubset<T, WalletTransfersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WalletTransfers and returns the data saved in the database.
   * @param {WalletTransfersCreateManyAndReturnArgs} args - Arguments to create many WalletTransfers.
   * @example
   * // Create many WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WalletTransfers and only return the `id`
   * const walletTransfersWithIdOnly = await prisma.walletTransfers.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WalletTransfersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WalletTransfersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WalletTransfers.
   * @param {WalletTransfersDeleteArgs} args - Arguments to delete one WalletTransfers.
   * @example
   * // Delete one WalletTransfers
   * const WalletTransfers = await prisma.walletTransfers.delete({
   *   where: {
   *     // ... filter to delete one WalletTransfers
   *   }
   * })
   * 
   */
  delete<T extends WalletTransfersDeleteArgs>(args: Prisma.SelectSubset<T, WalletTransfersDeleteArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WalletTransfers.
   * @param {WalletTransfersUpdateArgs} args - Arguments to update one WalletTransfers.
   * @example
   * // Update one WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WalletTransfersUpdateArgs>(args: Prisma.SelectSubset<T, WalletTransfersUpdateArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WalletTransfers.
   * @param {WalletTransfersDeleteManyArgs} args - Arguments to filter WalletTransfers to delete.
   * @example
   * // Delete a few WalletTransfers
   * const { count } = await prisma.walletTransfers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WalletTransfersDeleteManyArgs>(args?: Prisma.SelectSubset<T, WalletTransfersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WalletTransfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WalletTransfersUpdateManyArgs>(args: Prisma.SelectSubset<T, WalletTransfersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WalletTransfers and returns the data updated in the database.
   * @param {WalletTransfersUpdateManyAndReturnArgs} args - Arguments to update many WalletTransfers.
   * @example
   * // Update many WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WalletTransfers and only return the `id`
   * const walletTransfersWithIdOnly = await prisma.walletTransfers.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WalletTransfersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WalletTransfersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WalletTransfers.
   * @param {WalletTransfersUpsertArgs} args - Arguments to update or create a WalletTransfers.
   * @example
   * // Update or create a WalletTransfers
   * const walletTransfers = await prisma.walletTransfers.upsert({
   *   create: {
   *     // ... data to create a WalletTransfers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WalletTransfers we want to update
   *   }
   * })
   */
  upsert<T extends WalletTransfersUpsertArgs>(args: Prisma.SelectSubset<T, WalletTransfersUpsertArgs<ExtArgs>>): Prisma.Prisma__WalletTransfersClient<runtime.Types.Result.GetResult<Prisma.$WalletTransfersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WalletTransfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersCountArgs} args - Arguments to filter WalletTransfers to count.
   * @example
   * // Count the number of WalletTransfers
   * const count = await prisma.walletTransfers.count({
   *   where: {
   *     // ... the filter for the WalletTransfers we want to count
   *   }
   * })
  **/
  count<T extends WalletTransfersCountArgs>(
    args?: Prisma.Subset<T, WalletTransfersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WalletTransfersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WalletTransfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WalletTransfersAggregateArgs>(args: Prisma.Subset<T, WalletTransfersAggregateArgs>): Prisma.PrismaPromise<GetWalletTransfersAggregateType<T>>

  /**
   * Group by WalletTransfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransfersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WalletTransfersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WalletTransfersGroupByArgs['orderBy'] }
      : { orderBy?: WalletTransfersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WalletTransfersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletTransfersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WalletTransfers model
 */
readonly fields: WalletTransfersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WalletTransfers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WalletTransfersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  FromUser<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  ToUser<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WalletTransfers model
 */
export interface WalletTransfersFieldRefs {
  readonly id: Prisma.FieldRef<"WalletTransfers", 'Int'>
  readonly from: Prisma.FieldRef<"WalletTransfers", 'Int'>
  readonly to: Prisma.FieldRef<"WalletTransfers", 'Int'>
  readonly amount: Prisma.FieldRef<"WalletTransfers", 'Int'>
  readonly status: Prisma.FieldRef<"WalletTransfers", 'Status'>
  readonly startedAt: Prisma.FieldRef<"WalletTransfers", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WalletTransfers", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WalletTransfers findUnique
 */
export type WalletTransfersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransfers to fetch.
   */
  where: Prisma.WalletTransfersWhereUniqueInput
}

/**
 * WalletTransfers findUniqueOrThrow
 */
export type WalletTransfersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransfers to fetch.
   */
  where: Prisma.WalletTransfersWhereUniqueInput
}

/**
 * WalletTransfers findFirst
 */
export type WalletTransfersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransfers to fetch.
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransfers to fetch.
   */
  orderBy?: Prisma.WalletTransfersOrderByWithRelationInput | Prisma.WalletTransfersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WalletTransfers.
   */
  cursor?: Prisma.WalletTransfersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WalletTransfers.
   */
  distinct?: Prisma.WalletTransfersScalarFieldEnum | Prisma.WalletTransfersScalarFieldEnum[]
}

/**
 * WalletTransfers findFirstOrThrow
 */
export type WalletTransfersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransfers to fetch.
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransfers to fetch.
   */
  orderBy?: Prisma.WalletTransfersOrderByWithRelationInput | Prisma.WalletTransfersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WalletTransfers.
   */
  cursor?: Prisma.WalletTransfersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WalletTransfers.
   */
  distinct?: Prisma.WalletTransfersScalarFieldEnum | Prisma.WalletTransfersScalarFieldEnum[]
}

/**
 * WalletTransfers findMany
 */
export type WalletTransfersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransfers to fetch.
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransfers to fetch.
   */
  orderBy?: Prisma.WalletTransfersOrderByWithRelationInput | Prisma.WalletTransfersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WalletTransfers.
   */
  cursor?: Prisma.WalletTransfersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransfers.
   */
  skip?: number
  distinct?: Prisma.WalletTransfersScalarFieldEnum | Prisma.WalletTransfersScalarFieldEnum[]
}

/**
 * WalletTransfers create
 */
export type WalletTransfersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * The data needed to create a WalletTransfers.
   */
  data: Prisma.XOR<Prisma.WalletTransfersCreateInput, Prisma.WalletTransfersUncheckedCreateInput>
}

/**
 * WalletTransfers createMany
 */
export type WalletTransfersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WalletTransfers.
   */
  data: Prisma.WalletTransfersCreateManyInput | Prisma.WalletTransfersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WalletTransfers createManyAndReturn
 */
export type WalletTransfersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * The data used to create many WalletTransfers.
   */
  data: Prisma.WalletTransfersCreateManyInput | Prisma.WalletTransfersCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WalletTransfers update
 */
export type WalletTransfersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * The data needed to update a WalletTransfers.
   */
  data: Prisma.XOR<Prisma.WalletTransfersUpdateInput, Prisma.WalletTransfersUncheckedUpdateInput>
  /**
   * Choose, which WalletTransfers to update.
   */
  where: Prisma.WalletTransfersWhereUniqueInput
}

/**
 * WalletTransfers updateMany
 */
export type WalletTransfersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WalletTransfers.
   */
  data: Prisma.XOR<Prisma.WalletTransfersUpdateManyMutationInput, Prisma.WalletTransfersUncheckedUpdateManyInput>
  /**
   * Filter which WalletTransfers to update
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * Limit how many WalletTransfers to update.
   */
  limit?: number
}

/**
 * WalletTransfers updateManyAndReturn
 */
export type WalletTransfersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * The data used to update WalletTransfers.
   */
  data: Prisma.XOR<Prisma.WalletTransfersUpdateManyMutationInput, Prisma.WalletTransfersUncheckedUpdateManyInput>
  /**
   * Filter which WalletTransfers to update
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * Limit how many WalletTransfers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WalletTransfers upsert
 */
export type WalletTransfersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * The filter to search for the WalletTransfers to update in case it exists.
   */
  where: Prisma.WalletTransfersWhereUniqueInput
  /**
   * In case the WalletTransfers found by the `where` argument doesn't exist, create a new WalletTransfers with this data.
   */
  create: Prisma.XOR<Prisma.WalletTransfersCreateInput, Prisma.WalletTransfersUncheckedCreateInput>
  /**
   * In case the WalletTransfers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WalletTransfersUpdateInput, Prisma.WalletTransfersUncheckedUpdateInput>
}

/**
 * WalletTransfers delete
 */
export type WalletTransfersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
  /**
   * Filter which WalletTransfers to delete.
   */
  where: Prisma.WalletTransfersWhereUniqueInput
}

/**
 * WalletTransfers deleteMany
 */
export type WalletTransfersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WalletTransfers to delete
   */
  where?: Prisma.WalletTransfersWhereInput
  /**
   * Limit how many WalletTransfers to delete.
   */
  limit?: number
}

/**
 * WalletTransfers without action
 */
export type WalletTransfersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransfers
   */
  select?: Prisma.WalletTransfersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransfers
   */
  omit?: Prisma.WalletTransfersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransfersInclude<ExtArgs> | null
}
