
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Transactions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Transactions
 * 
 */
export type TransactionsModel = runtime.Types.Result.DefaultSelection<Prisma.$TransactionsPayload>

export type AggregateTransactions = {
  _count: TransactionsCountAggregateOutputType | null
  _avg: TransactionsAvgAggregateOutputType | null
  _sum: TransactionsSumAggregateOutputType | null
  _min: TransactionsMinAggregateOutputType | null
  _max: TransactionsMaxAggregateOutputType | null
}

export type TransactionsAvgAggregateOutputType = {
  id: number | null
  amount: number | null
  userId: number | null
}

export type TransactionsSumAggregateOutputType = {
  id: number | null
  amount: number | null
  userId: number | null
}

export type TransactionsMinAggregateOutputType = {
  id: number | null
  status: $Enums.Status | null
  statement: string | null
  token: string | null
  provider: string | null
  amount: number | null
  transactionType: $Enums.TransactionType | null
  startTime: Date | null
  upatedAt: Date | null
  userId: number | null
}

export type TransactionsMaxAggregateOutputType = {
  id: number | null
  status: $Enums.Status | null
  statement: string | null
  token: string | null
  provider: string | null
  amount: number | null
  transactionType: $Enums.TransactionType | null
  startTime: Date | null
  upatedAt: Date | null
  userId: number | null
}

export type TransactionsCountAggregateOutputType = {
  id: number
  status: number
  statement: number
  token: number
  provider: number
  amount: number
  transactionType: number
  startTime: number
  upatedAt: number
  userId: number
  _all: number
}


export type TransactionsAvgAggregateInputType = {
  id?: true
  amount?: true
  userId?: true
}

export type TransactionsSumAggregateInputType = {
  id?: true
  amount?: true
  userId?: true
}

export type TransactionsMinAggregateInputType = {
  id?: true
  status?: true
  statement?: true
  token?: true
  provider?: true
  amount?: true
  transactionType?: true
  startTime?: true
  upatedAt?: true
  userId?: true
}

export type TransactionsMaxAggregateInputType = {
  id?: true
  status?: true
  statement?: true
  token?: true
  provider?: true
  amount?: true
  transactionType?: true
  startTime?: true
  upatedAt?: true
  userId?: true
}

export type TransactionsCountAggregateInputType = {
  id?: true
  status?: true
  statement?: true
  token?: true
  provider?: true
  amount?: true
  transactionType?: true
  startTime?: true
  upatedAt?: true
  userId?: true
  _all?: true
}

export type TransactionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Transactions to aggregate.
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionsOrderByWithRelationInput | Prisma.TransactionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransactionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Transactions
  **/
  _count?: true | TransactionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TransactionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TransactionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransactionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransactionsMaxAggregateInputType
}

export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
      [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransactions[P]>
    : Prisma.GetScalarType<T[P], AggregateTransactions[P]>
}




export type TransactionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionsWhereInput
  orderBy?: Prisma.TransactionsOrderByWithAggregationInput | Prisma.TransactionsOrderByWithAggregationInput[]
  by: Prisma.TransactionsScalarFieldEnum[] | Prisma.TransactionsScalarFieldEnum
  having?: Prisma.TransactionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransactionsCountAggregateInputType | true
  _avg?: TransactionsAvgAggregateInputType
  _sum?: TransactionsSumAggregateInputType
  _min?: TransactionsMinAggregateInputType
  _max?: TransactionsMaxAggregateInputType
}

export type TransactionsGroupByOutputType = {
  id: number
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime: Date
  upatedAt: Date
  userId: number
  _count: TransactionsCountAggregateOutputType | null
  _avg: TransactionsAvgAggregateOutputType | null
  _sum: TransactionsSumAggregateOutputType | null
  _min: TransactionsMinAggregateOutputType | null
  _max: TransactionsMaxAggregateOutputType | null
}

type GetTransactionsGroupByPayload<T extends TransactionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransactionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransactionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransactionsGroupByOutputType[P]>
      }
    >
  >



export type TransactionsWhereInput = {
  AND?: Prisma.TransactionsWhereInput | Prisma.TransactionsWhereInput[]
  OR?: Prisma.TransactionsWhereInput[]
  NOT?: Prisma.TransactionsWhereInput | Prisma.TransactionsWhereInput[]
  id?: Prisma.IntFilter<"Transactions"> | number
  status?: Prisma.EnumStatusFilter<"Transactions"> | $Enums.Status
  statement?: Prisma.StringFilter<"Transactions"> | string
  token?: Prisma.StringFilter<"Transactions"> | string
  provider?: Prisma.StringFilter<"Transactions"> | string
  amount?: Prisma.IntFilter<"Transactions"> | number
  transactionType?: Prisma.EnumTransactionTypeFilter<"Transactions"> | $Enums.TransactionType
  startTime?: Prisma.DateTimeFilter<"Transactions"> | Date | string
  upatedAt?: Prisma.DateTimeFilter<"Transactions"> | Date | string
  userId?: Prisma.IntFilter<"Transactions"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type TransactionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  statement?: Prisma.SortOrder
  token?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionType?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  upatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type TransactionsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  token?: string
  AND?: Prisma.TransactionsWhereInput | Prisma.TransactionsWhereInput[]
  OR?: Prisma.TransactionsWhereInput[]
  NOT?: Prisma.TransactionsWhereInput | Prisma.TransactionsWhereInput[]
  status?: Prisma.EnumStatusFilter<"Transactions"> | $Enums.Status
  statement?: Prisma.StringFilter<"Transactions"> | string
  provider?: Prisma.StringFilter<"Transactions"> | string
  amount?: Prisma.IntFilter<"Transactions"> | number
  transactionType?: Prisma.EnumTransactionTypeFilter<"Transactions"> | $Enums.TransactionType
  startTime?: Prisma.DateTimeFilter<"Transactions"> | Date | string
  upatedAt?: Prisma.DateTimeFilter<"Transactions"> | Date | string
  userId?: Prisma.IntFilter<"Transactions"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "token">

export type TransactionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  statement?: Prisma.SortOrder
  token?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionType?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  upatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.TransactionsCountOrderByAggregateInput
  _avg?: Prisma.TransactionsAvgOrderByAggregateInput
  _max?: Prisma.TransactionsMaxOrderByAggregateInput
  _min?: Prisma.TransactionsMinOrderByAggregateInput
  _sum?: Prisma.TransactionsSumOrderByAggregateInput
}

export type TransactionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransactionsScalarWhereWithAggregatesInput | Prisma.TransactionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransactionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransactionsScalarWhereWithAggregatesInput | Prisma.TransactionsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Transactions"> | number
  status?: Prisma.EnumStatusWithAggregatesFilter<"Transactions"> | $Enums.Status
  statement?: Prisma.StringWithAggregatesFilter<"Transactions"> | string
  token?: Prisma.StringWithAggregatesFilter<"Transactions"> | string
  provider?: Prisma.StringWithAggregatesFilter<"Transactions"> | string
  amount?: Prisma.IntWithAggregatesFilter<"Transactions"> | number
  transactionType?: Prisma.EnumTransactionTypeWithAggregatesFilter<"Transactions"> | $Enums.TransactionType
  startTime?: Prisma.DateTimeWithAggregatesFilter<"Transactions"> | Date | string
  upatedAt?: Prisma.DateTimeWithAggregatesFilter<"Transactions"> | Date | string
  userId?: Prisma.IntWithAggregatesFilter<"Transactions"> | number
}

export type TransactionsCreateInput = {
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime?: Date | string
  upatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTransactionsInput
}

export type TransactionsUncheckedCreateInput = {
  id?: number
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime?: Date | string
  upatedAt?: Date | string
  userId: number
}

export type TransactionsUpdateInput = {
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTransactionsNestedInput
}

export type TransactionsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TransactionsCreateManyInput = {
  id?: number
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime?: Date | string
  upatedAt?: Date | string
  userId: number
}

export type TransactionsUpdateManyMutationInput = {
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TransactionsListRelationFilter = {
  every?: Prisma.TransactionsWhereInput
  some?: Prisma.TransactionsWhereInput
  none?: Prisma.TransactionsWhereInput
}

export type TransactionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransactionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  statement?: Prisma.SortOrder
  token?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionType?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  upatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TransactionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TransactionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  statement?: Prisma.SortOrder
  token?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionType?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  upatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TransactionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  statement?: Prisma.SortOrder
  token?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionType?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  upatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TransactionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TransactionsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TransactionsCreateWithoutUserInput, Prisma.TransactionsUncheckedCreateWithoutUserInput> | Prisma.TransactionsCreateWithoutUserInput[] | Prisma.TransactionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TransactionsCreateOrConnectWithoutUserInput | Prisma.TransactionsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TransactionsCreateManyUserInputEnvelope
  connect?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
}

export type TransactionsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TransactionsCreateWithoutUserInput, Prisma.TransactionsUncheckedCreateWithoutUserInput> | Prisma.TransactionsCreateWithoutUserInput[] | Prisma.TransactionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TransactionsCreateOrConnectWithoutUserInput | Prisma.TransactionsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TransactionsCreateManyUserInputEnvelope
  connect?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
}

export type TransactionsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionsCreateWithoutUserInput, Prisma.TransactionsUncheckedCreateWithoutUserInput> | Prisma.TransactionsCreateWithoutUserInput[] | Prisma.TransactionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TransactionsCreateOrConnectWithoutUserInput | Prisma.TransactionsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TransactionsUpsertWithWhereUniqueWithoutUserInput | Prisma.TransactionsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TransactionsCreateManyUserInputEnvelope
  set?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  disconnect?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  delete?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  connect?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  update?: Prisma.TransactionsUpdateWithWhereUniqueWithoutUserInput | Prisma.TransactionsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TransactionsUpdateManyWithWhereWithoutUserInput | Prisma.TransactionsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TransactionsScalarWhereInput | Prisma.TransactionsScalarWhereInput[]
}

export type TransactionsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionsCreateWithoutUserInput, Prisma.TransactionsUncheckedCreateWithoutUserInput> | Prisma.TransactionsCreateWithoutUserInput[] | Prisma.TransactionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TransactionsCreateOrConnectWithoutUserInput | Prisma.TransactionsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TransactionsUpsertWithWhereUniqueWithoutUserInput | Prisma.TransactionsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TransactionsCreateManyUserInputEnvelope
  set?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  disconnect?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  delete?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  connect?: Prisma.TransactionsWhereUniqueInput | Prisma.TransactionsWhereUniqueInput[]
  update?: Prisma.TransactionsUpdateWithWhereUniqueWithoutUserInput | Prisma.TransactionsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TransactionsUpdateManyWithWhereWithoutUserInput | Prisma.TransactionsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TransactionsScalarWhereInput | Prisma.TransactionsScalarWhereInput[]
}

export type EnumStatusFieldUpdateOperationsInput = {
  set?: $Enums.Status
}

export type EnumTransactionTypeFieldUpdateOperationsInput = {
  set?: $Enums.TransactionType
}

export type TransactionsCreateWithoutUserInput = {
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime?: Date | string
  upatedAt?: Date | string
}

export type TransactionsUncheckedCreateWithoutUserInput = {
  id?: number
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime?: Date | string
  upatedAt?: Date | string
}

export type TransactionsCreateOrConnectWithoutUserInput = {
  where: Prisma.TransactionsWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionsCreateWithoutUserInput, Prisma.TransactionsUncheckedCreateWithoutUserInput>
}

export type TransactionsCreateManyUserInputEnvelope = {
  data: Prisma.TransactionsCreateManyUserInput | Prisma.TransactionsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TransactionsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TransactionsWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionsUpdateWithoutUserInput, Prisma.TransactionsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TransactionsCreateWithoutUserInput, Prisma.TransactionsUncheckedCreateWithoutUserInput>
}

export type TransactionsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TransactionsWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionsUpdateWithoutUserInput, Prisma.TransactionsUncheckedUpdateWithoutUserInput>
}

export type TransactionsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TransactionsScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionsUpdateManyMutationInput, Prisma.TransactionsUncheckedUpdateManyWithoutUserInput>
}

export type TransactionsScalarWhereInput = {
  AND?: Prisma.TransactionsScalarWhereInput | Prisma.TransactionsScalarWhereInput[]
  OR?: Prisma.TransactionsScalarWhereInput[]
  NOT?: Prisma.TransactionsScalarWhereInput | Prisma.TransactionsScalarWhereInput[]
  id?: Prisma.IntFilter<"Transactions"> | number
  status?: Prisma.EnumStatusFilter<"Transactions"> | $Enums.Status
  statement?: Prisma.StringFilter<"Transactions"> | string
  token?: Prisma.StringFilter<"Transactions"> | string
  provider?: Prisma.StringFilter<"Transactions"> | string
  amount?: Prisma.IntFilter<"Transactions"> | number
  transactionType?: Prisma.EnumTransactionTypeFilter<"Transactions"> | $Enums.TransactionType
  startTime?: Prisma.DateTimeFilter<"Transactions"> | Date | string
  upatedAt?: Prisma.DateTimeFilter<"Transactions"> | Date | string
  userId?: Prisma.IntFilter<"Transactions"> | number
}

export type TransactionsCreateManyUserInput = {
  id?: number
  status: $Enums.Status
  statement: string
  token: string
  provider: string
  amount: number
  transactionType: $Enums.TransactionType
  startTime?: Date | string
  upatedAt?: Date | string
}

export type TransactionsUpdateWithoutUserInput = {
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  statement?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transactionType?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  upatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TransactionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  statement?: boolean
  token?: boolean
  provider?: boolean
  amount?: boolean
  transactionType?: boolean
  startTime?: boolean
  upatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactions"]>

export type TransactionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  statement?: boolean
  token?: boolean
  provider?: boolean
  amount?: boolean
  transactionType?: boolean
  startTime?: boolean
  upatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactions"]>

export type TransactionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  statement?: boolean
  token?: boolean
  provider?: boolean
  amount?: boolean
  transactionType?: boolean
  startTime?: boolean
  upatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactions"]>

export type TransactionsSelectScalar = {
  id?: boolean
  status?: boolean
  statement?: boolean
  token?: boolean
  provider?: boolean
  amount?: boolean
  transactionType?: boolean
  startTime?: boolean
  upatedAt?: boolean
  userId?: boolean
}

export type TransactionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "status" | "statement" | "token" | "provider" | "amount" | "transactionType" | "startTime" | "upatedAt" | "userId", ExtArgs["result"]["transactions"]>
export type TransactionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TransactionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TransactionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TransactionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Transactions"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    status: $Enums.Status
    statement: string
    token: string
    provider: string
    amount: number
    transactionType: $Enums.TransactionType
    startTime: Date
    upatedAt: Date
    userId: number
  }, ExtArgs["result"]["transactions"]>
  composites: {}
}

export type TransactionsGetPayload<S extends boolean | null | undefined | TransactionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransactionsPayload, S>

export type TransactionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransactionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransactionsCountAggregateInputType | true
  }

export interface TransactionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transactions'], meta: { name: 'Transactions' } }
  /**
   * Find zero or one Transactions that matches the filter.
   * @param {TransactionsFindUniqueArgs} args - Arguments to find a Transactions
   * @example
   * // Get one Transactions
   * const transactions = await prisma.transactions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransactionsFindUniqueArgs>(args: Prisma.SelectSubset<T, TransactionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Transactions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
   * @example
   * // Get one Transactions
   * const transactions = await prisma.transactions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransactionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Transactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsFindFirstArgs} args - Arguments to find a Transactions
   * @example
   * // Get one Transactions
   * const transactions = await prisma.transactions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransactionsFindFirstArgs>(args?: Prisma.SelectSubset<T, TransactionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Transactions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
   * @example
   * // Get one Transactions
   * const transactions = await prisma.transactions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransactionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Transactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Transactions
   * const transactions = await prisma.transactions.findMany()
   * 
   * // Get first 10 Transactions
   * const transactions = await prisma.transactions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransactionsFindManyArgs>(args?: Prisma.SelectSubset<T, TransactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Transactions.
   * @param {TransactionsCreateArgs} args - Arguments to create a Transactions.
   * @example
   * // Create one Transactions
   * const Transactions = await prisma.transactions.create({
   *   data: {
   *     // ... data to create a Transactions
   *   }
   * })
   * 
   */
  create<T extends TransactionsCreateArgs>(args: Prisma.SelectSubset<T, TransactionsCreateArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Transactions.
   * @param {TransactionsCreateManyArgs} args - Arguments to create many Transactions.
   * @example
   * // Create many Transactions
   * const transactions = await prisma.transactions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransactionsCreateManyArgs>(args?: Prisma.SelectSubset<T, TransactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Transactions and returns the data saved in the database.
   * @param {TransactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
   * @example
   * // Create many Transactions
   * const transactions = await prisma.transactions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Transactions and only return the `id`
   * const transactionsWithIdOnly = await prisma.transactions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransactionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Transactions.
   * @param {TransactionsDeleteArgs} args - Arguments to delete one Transactions.
   * @example
   * // Delete one Transactions
   * const Transactions = await prisma.transactions.delete({
   *   where: {
   *     // ... filter to delete one Transactions
   *   }
   * })
   * 
   */
  delete<T extends TransactionsDeleteArgs>(args: Prisma.SelectSubset<T, TransactionsDeleteArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Transactions.
   * @param {TransactionsUpdateArgs} args - Arguments to update one Transactions.
   * @example
   * // Update one Transactions
   * const transactions = await prisma.transactions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransactionsUpdateArgs>(args: Prisma.SelectSubset<T, TransactionsUpdateArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Transactions.
   * @param {TransactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
   * @example
   * // Delete a few Transactions
   * const { count } = await prisma.transactions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransactionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Transactions
   * const transactions = await prisma.transactions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransactionsUpdateManyArgs>(args: Prisma.SelectSubset<T, TransactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Transactions and returns the data updated in the database.
   * @param {TransactionsUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
   * @example
   * // Update many Transactions
   * const transactions = await prisma.transactions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Transactions and only return the `id`
   * const transactionsWithIdOnly = await prisma.transactions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransactionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransactionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Transactions.
   * @param {TransactionsUpsertArgs} args - Arguments to update or create a Transactions.
   * @example
   * // Update or create a Transactions
   * const transactions = await prisma.transactions.upsert({
   *   create: {
   *     // ... data to create a Transactions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Transactions we want to update
   *   }
   * })
   */
  upsert<T extends TransactionsUpsertArgs>(args: Prisma.SelectSubset<T, TransactionsUpsertArgs<ExtArgs>>): Prisma.Prisma__TransactionsClient<runtime.Types.Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsCountArgs} args - Arguments to filter Transactions to count.
   * @example
   * // Count the number of Transactions
   * const count = await prisma.transactions.count({
   *   where: {
   *     // ... the filter for the Transactions we want to count
   *   }
   * })
  **/
  count<T extends TransactionsCountArgs>(
    args?: Prisma.Subset<T, TransactionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransactionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransactionsAggregateArgs>(args: Prisma.Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

  /**
   * Group by Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransactionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransactionsGroupByArgs['orderBy'] }
      : { orderBy?: TransactionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Transactions model
 */
readonly fields: TransactionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Transactions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransactionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Transactions model
 */
export interface TransactionsFieldRefs {
  readonly id: Prisma.FieldRef<"Transactions", 'Int'>
  readonly status: Prisma.FieldRef<"Transactions", 'Status'>
  readonly statement: Prisma.FieldRef<"Transactions", 'String'>
  readonly token: Prisma.FieldRef<"Transactions", 'String'>
  readonly provider: Prisma.FieldRef<"Transactions", 'String'>
  readonly amount: Prisma.FieldRef<"Transactions", 'Int'>
  readonly transactionType: Prisma.FieldRef<"Transactions", 'TransactionType'>
  readonly startTime: Prisma.FieldRef<"Transactions", 'DateTime'>
  readonly upatedAt: Prisma.FieldRef<"Transactions", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Transactions", 'Int'>
}
    

// Custom InputTypes
/**
 * Transactions findUnique
 */
export type TransactionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * Filter, which Transactions to fetch.
   */
  where: Prisma.TransactionsWhereUniqueInput
}

/**
 * Transactions findUniqueOrThrow
 */
export type TransactionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * Filter, which Transactions to fetch.
   */
  where: Prisma.TransactionsWhereUniqueInput
}

/**
 * Transactions findFirst
 */
export type TransactionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * Filter, which Transactions to fetch.
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionsOrderByWithRelationInput | Prisma.TransactionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Transactions.
   */
  cursor?: Prisma.TransactionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Transactions.
   */
  distinct?: Prisma.TransactionsScalarFieldEnum | Prisma.TransactionsScalarFieldEnum[]
}

/**
 * Transactions findFirstOrThrow
 */
export type TransactionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * Filter, which Transactions to fetch.
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionsOrderByWithRelationInput | Prisma.TransactionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Transactions.
   */
  cursor?: Prisma.TransactionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Transactions.
   */
  distinct?: Prisma.TransactionsScalarFieldEnum | Prisma.TransactionsScalarFieldEnum[]
}

/**
 * Transactions findMany
 */
export type TransactionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * Filter, which Transactions to fetch.
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionsOrderByWithRelationInput | Prisma.TransactionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Transactions.
   */
  cursor?: Prisma.TransactionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  distinct?: Prisma.TransactionsScalarFieldEnum | Prisma.TransactionsScalarFieldEnum[]
}

/**
 * Transactions create
 */
export type TransactionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * The data needed to create a Transactions.
   */
  data: Prisma.XOR<Prisma.TransactionsCreateInput, Prisma.TransactionsUncheckedCreateInput>
}

/**
 * Transactions createMany
 */
export type TransactionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Transactions.
   */
  data: Prisma.TransactionsCreateManyInput | Prisma.TransactionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Transactions createManyAndReturn
 */
export type TransactionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * The data used to create many Transactions.
   */
  data: Prisma.TransactionsCreateManyInput | Prisma.TransactionsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Transactions update
 */
export type TransactionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * The data needed to update a Transactions.
   */
  data: Prisma.XOR<Prisma.TransactionsUpdateInput, Prisma.TransactionsUncheckedUpdateInput>
  /**
   * Choose, which Transactions to update.
   */
  where: Prisma.TransactionsWhereUniqueInput
}

/**
 * Transactions updateMany
 */
export type TransactionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Transactions.
   */
  data: Prisma.XOR<Prisma.TransactionsUpdateManyMutationInput, Prisma.TransactionsUncheckedUpdateManyInput>
  /**
   * Filter which Transactions to update
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * Limit how many Transactions to update.
   */
  limit?: number
}

/**
 * Transactions updateManyAndReturn
 */
export type TransactionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * The data used to update Transactions.
   */
  data: Prisma.XOR<Prisma.TransactionsUpdateManyMutationInput, Prisma.TransactionsUncheckedUpdateManyInput>
  /**
   * Filter which Transactions to update
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * Limit how many Transactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Transactions upsert
 */
export type TransactionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * The filter to search for the Transactions to update in case it exists.
   */
  where: Prisma.TransactionsWhereUniqueInput
  /**
   * In case the Transactions found by the `where` argument doesn't exist, create a new Transactions with this data.
   */
  create: Prisma.XOR<Prisma.TransactionsCreateInput, Prisma.TransactionsUncheckedCreateInput>
  /**
   * In case the Transactions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransactionsUpdateInput, Prisma.TransactionsUncheckedUpdateInput>
}

/**
 * Transactions delete
 */
export type TransactionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
  /**
   * Filter which Transactions to delete.
   */
  where: Prisma.TransactionsWhereUniqueInput
}

/**
 * Transactions deleteMany
 */
export type TransactionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Transactions to delete
   */
  where?: Prisma.TransactionsWhereInput
  /**
   * Limit how many Transactions to delete.
   */
  limit?: number
}

/**
 * Transactions without action
 */
export type TransactionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transactions
   */
  select?: Prisma.TransactionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transactions
   */
  omit?: Prisma.TransactionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionsInclude<ExtArgs> | null
}
