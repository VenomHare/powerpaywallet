
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Balance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Balance
 * 
 */
export type BalanceModel = runtime.Types.Result.DefaultSelection<Prisma.$BalancePayload>

export type AggregateBalance = {
  _count: BalanceCountAggregateOutputType | null
  _avg: BalanceAvgAggregateOutputType | null
  _sum: BalanceSumAggregateOutputType | null
  _min: BalanceMinAggregateOutputType | null
  _max: BalanceMaxAggregateOutputType | null
}

export type BalanceAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  amount: number | null
  locked: number | null
}

export type BalanceSumAggregateOutputType = {
  id: number | null
  userId: number | null
  amount: number | null
  locked: number | null
}

export type BalanceMinAggregateOutputType = {
  id: number | null
  userId: number | null
  amount: number | null
  locked: number | null
}

export type BalanceMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  amount: number | null
  locked: number | null
}

export type BalanceCountAggregateOutputType = {
  id: number
  userId: number
  amount: number
  locked: number
  _all: number
}


export type BalanceAvgAggregateInputType = {
  id?: true
  userId?: true
  amount?: true
  locked?: true
}

export type BalanceSumAggregateInputType = {
  id?: true
  userId?: true
  amount?: true
  locked?: true
}

export type BalanceMinAggregateInputType = {
  id?: true
  userId?: true
  amount?: true
  locked?: true
}

export type BalanceMaxAggregateInputType = {
  id?: true
  userId?: true
  amount?: true
  locked?: true
}

export type BalanceCountAggregateInputType = {
  id?: true
  userId?: true
  amount?: true
  locked?: true
  _all?: true
}

export type BalanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Balance to aggregate.
   */
  where?: Prisma.BalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Balances to fetch.
   */
  orderBy?: Prisma.BalanceOrderByWithRelationInput | Prisma.BalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Balances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Balances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Balances
  **/
  _count?: true | BalanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BalanceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BalanceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BalanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BalanceMaxAggregateInputType
}

export type GetBalanceAggregateType<T extends BalanceAggregateArgs> = {
      [P in keyof T & keyof AggregateBalance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBalance[P]>
    : Prisma.GetScalarType<T[P], AggregateBalance[P]>
}




export type BalanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BalanceWhereInput
  orderBy?: Prisma.BalanceOrderByWithAggregationInput | Prisma.BalanceOrderByWithAggregationInput[]
  by: Prisma.BalanceScalarFieldEnum[] | Prisma.BalanceScalarFieldEnum
  having?: Prisma.BalanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BalanceCountAggregateInputType | true
  _avg?: BalanceAvgAggregateInputType
  _sum?: BalanceSumAggregateInputType
  _min?: BalanceMinAggregateInputType
  _max?: BalanceMaxAggregateInputType
}

export type BalanceGroupByOutputType = {
  id: number
  userId: number
  amount: number
  locked: number
  _count: BalanceCountAggregateOutputType | null
  _avg: BalanceAvgAggregateOutputType | null
  _sum: BalanceSumAggregateOutputType | null
  _min: BalanceMinAggregateOutputType | null
  _max: BalanceMaxAggregateOutputType | null
}

type GetBalanceGroupByPayload<T extends BalanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BalanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BalanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BalanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BalanceGroupByOutputType[P]>
      }
    >
  >



export type BalanceWhereInput = {
  AND?: Prisma.BalanceWhereInput | Prisma.BalanceWhereInput[]
  OR?: Prisma.BalanceWhereInput[]
  NOT?: Prisma.BalanceWhereInput | Prisma.BalanceWhereInput[]
  id?: Prisma.IntFilter<"Balance"> | number
  userId?: Prisma.IntFilter<"Balance"> | number
  amount?: Prisma.IntFilter<"Balance"> | number
  locked?: Prisma.IntFilter<"Balance"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type BalanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type BalanceWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId?: number
  AND?: Prisma.BalanceWhereInput | Prisma.BalanceWhereInput[]
  OR?: Prisma.BalanceWhereInput[]
  NOT?: Prisma.BalanceWhereInput | Prisma.BalanceWhereInput[]
  amount?: Prisma.IntFilter<"Balance"> | number
  locked?: Prisma.IntFilter<"Balance"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type BalanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
  _count?: Prisma.BalanceCountOrderByAggregateInput
  _avg?: Prisma.BalanceAvgOrderByAggregateInput
  _max?: Prisma.BalanceMaxOrderByAggregateInput
  _min?: Prisma.BalanceMinOrderByAggregateInput
  _sum?: Prisma.BalanceSumOrderByAggregateInput
}

export type BalanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.BalanceScalarWhereWithAggregatesInput | Prisma.BalanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.BalanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BalanceScalarWhereWithAggregatesInput | Prisma.BalanceScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Balance"> | number
  userId?: Prisma.IntWithAggregatesFilter<"Balance"> | number
  amount?: Prisma.IntWithAggregatesFilter<"Balance"> | number
  locked?: Prisma.IntWithAggregatesFilter<"Balance"> | number
}

export type BalanceCreateInput = {
  amount?: number
  locked?: number
  user: Prisma.UserCreateNestedOneWithoutBalanceInput
}

export type BalanceUncheckedCreateInput = {
  id?: number
  userId: number
  amount?: number
  locked?: number
}

export type BalanceUpdateInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
  user?: Prisma.UserUpdateOneRequiredWithoutBalanceNestedInput
}

export type BalanceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BalanceCreateManyInput = {
  id?: number
  userId: number
  amount?: number
  locked?: number
}

export type BalanceUpdateManyMutationInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BalanceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BalanceListRelationFilter = {
  every?: Prisma.BalanceWhereInput
  some?: Prisma.BalanceWhereInput
  none?: Prisma.BalanceWhereInput
}

export type BalanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BalanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
}

export type BalanceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
}

export type BalanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
}

export type BalanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
}

export type BalanceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  locked?: Prisma.SortOrder
}

export type BalanceCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BalanceCreateWithoutUserInput, Prisma.BalanceUncheckedCreateWithoutUserInput> | Prisma.BalanceCreateWithoutUserInput[] | Prisma.BalanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BalanceCreateOrConnectWithoutUserInput | Prisma.BalanceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BalanceCreateManyUserInputEnvelope
  connect?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
}

export type BalanceUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BalanceCreateWithoutUserInput, Prisma.BalanceUncheckedCreateWithoutUserInput> | Prisma.BalanceCreateWithoutUserInput[] | Prisma.BalanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BalanceCreateOrConnectWithoutUserInput | Prisma.BalanceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BalanceCreateManyUserInputEnvelope
  connect?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
}

export type BalanceUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BalanceCreateWithoutUserInput, Prisma.BalanceUncheckedCreateWithoutUserInput> | Prisma.BalanceCreateWithoutUserInput[] | Prisma.BalanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BalanceCreateOrConnectWithoutUserInput | Prisma.BalanceCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BalanceUpsertWithWhereUniqueWithoutUserInput | Prisma.BalanceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BalanceCreateManyUserInputEnvelope
  set?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  disconnect?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  delete?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  connect?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  update?: Prisma.BalanceUpdateWithWhereUniqueWithoutUserInput | Prisma.BalanceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BalanceUpdateManyWithWhereWithoutUserInput | Prisma.BalanceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BalanceScalarWhereInput | Prisma.BalanceScalarWhereInput[]
}

export type BalanceUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BalanceCreateWithoutUserInput, Prisma.BalanceUncheckedCreateWithoutUserInput> | Prisma.BalanceCreateWithoutUserInput[] | Prisma.BalanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BalanceCreateOrConnectWithoutUserInput | Prisma.BalanceCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BalanceUpsertWithWhereUniqueWithoutUserInput | Prisma.BalanceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BalanceCreateManyUserInputEnvelope
  set?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  disconnect?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  delete?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  connect?: Prisma.BalanceWhereUniqueInput | Prisma.BalanceWhereUniqueInput[]
  update?: Prisma.BalanceUpdateWithWhereUniqueWithoutUserInput | Prisma.BalanceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BalanceUpdateManyWithWhereWithoutUserInput | Prisma.BalanceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BalanceScalarWhereInput | Prisma.BalanceScalarWhereInput[]
}

export type BalanceCreateWithoutUserInput = {
  amount?: number
  locked?: number
}

export type BalanceUncheckedCreateWithoutUserInput = {
  id?: number
  amount?: number
  locked?: number
}

export type BalanceCreateOrConnectWithoutUserInput = {
  where: Prisma.BalanceWhereUniqueInput
  create: Prisma.XOR<Prisma.BalanceCreateWithoutUserInput, Prisma.BalanceUncheckedCreateWithoutUserInput>
}

export type BalanceCreateManyUserInputEnvelope = {
  data: Prisma.BalanceCreateManyUserInput | Prisma.BalanceCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type BalanceUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BalanceWhereUniqueInput
  update: Prisma.XOR<Prisma.BalanceUpdateWithoutUserInput, Prisma.BalanceUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BalanceCreateWithoutUserInput, Prisma.BalanceUncheckedCreateWithoutUserInput>
}

export type BalanceUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BalanceWhereUniqueInput
  data: Prisma.XOR<Prisma.BalanceUpdateWithoutUserInput, Prisma.BalanceUncheckedUpdateWithoutUserInput>
}

export type BalanceUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BalanceScalarWhereInput
  data: Prisma.XOR<Prisma.BalanceUpdateManyMutationInput, Prisma.BalanceUncheckedUpdateManyWithoutUserInput>
}

export type BalanceScalarWhereInput = {
  AND?: Prisma.BalanceScalarWhereInput | Prisma.BalanceScalarWhereInput[]
  OR?: Prisma.BalanceScalarWhereInput[]
  NOT?: Prisma.BalanceScalarWhereInput | Prisma.BalanceScalarWhereInput[]
  id?: Prisma.IntFilter<"Balance"> | number
  userId?: Prisma.IntFilter<"Balance"> | number
  amount?: Prisma.IntFilter<"Balance"> | number
  locked?: Prisma.IntFilter<"Balance"> | number
}

export type BalanceCreateManyUserInput = {
  id?: number
  amount?: number
  locked?: number
}

export type BalanceUpdateWithoutUserInput = {
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BalanceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BalanceUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  locked?: Prisma.IntFieldUpdateOperationsInput | number
}



export type BalanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  amount?: boolean
  locked?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["balance"]>

export type BalanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  amount?: boolean
  locked?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["balance"]>

export type BalanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  amount?: boolean
  locked?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["balance"]>

export type BalanceSelectScalar = {
  id?: boolean
  userId?: boolean
  amount?: boolean
  locked?: boolean
}

export type BalanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "amount" | "locked", ExtArgs["result"]["balance"]>
export type BalanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BalanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BalanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $BalancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Balance"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number
    amount: number
    locked: number
  }, ExtArgs["result"]["balance"]>
  composites: {}
}

export type BalanceGetPayload<S extends boolean | null | undefined | BalanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BalancePayload, S>

export type BalanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BalanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BalanceCountAggregateInputType | true
  }

export interface BalanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Balance'], meta: { name: 'Balance' } }
  /**
   * Find zero or one Balance that matches the filter.
   * @param {BalanceFindUniqueArgs} args - Arguments to find a Balance
   * @example
   * // Get one Balance
   * const balance = await prisma.balance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BalanceFindUniqueArgs>(args: Prisma.SelectSubset<T, BalanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Balance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BalanceFindUniqueOrThrowArgs} args - Arguments to find a Balance
   * @example
   * // Get one Balance
   * const balance = await prisma.balance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BalanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Balance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceFindFirstArgs} args - Arguments to find a Balance
   * @example
   * // Get one Balance
   * const balance = await prisma.balance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BalanceFindFirstArgs>(args?: Prisma.SelectSubset<T, BalanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Balance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceFindFirstOrThrowArgs} args - Arguments to find a Balance
   * @example
   * // Get one Balance
   * const balance = await prisma.balance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BalanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Balances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Balances
   * const balances = await prisma.balance.findMany()
   * 
   * // Get first 10 Balances
   * const balances = await prisma.balance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const balanceWithIdOnly = await prisma.balance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BalanceFindManyArgs>(args?: Prisma.SelectSubset<T, BalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Balance.
   * @param {BalanceCreateArgs} args - Arguments to create a Balance.
   * @example
   * // Create one Balance
   * const Balance = await prisma.balance.create({
   *   data: {
   *     // ... data to create a Balance
   *   }
   * })
   * 
   */
  create<T extends BalanceCreateArgs>(args: Prisma.SelectSubset<T, BalanceCreateArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Balances.
   * @param {BalanceCreateManyArgs} args - Arguments to create many Balances.
   * @example
   * // Create many Balances
   * const balance = await prisma.balance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BalanceCreateManyArgs>(args?: Prisma.SelectSubset<T, BalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Balances and returns the data saved in the database.
   * @param {BalanceCreateManyAndReturnArgs} args - Arguments to create many Balances.
   * @example
   * // Create many Balances
   * const balance = await prisma.balance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Balances and only return the `id`
   * const balanceWithIdOnly = await prisma.balance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BalanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Balance.
   * @param {BalanceDeleteArgs} args - Arguments to delete one Balance.
   * @example
   * // Delete one Balance
   * const Balance = await prisma.balance.delete({
   *   where: {
   *     // ... filter to delete one Balance
   *   }
   * })
   * 
   */
  delete<T extends BalanceDeleteArgs>(args: Prisma.SelectSubset<T, BalanceDeleteArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Balance.
   * @param {BalanceUpdateArgs} args - Arguments to update one Balance.
   * @example
   * // Update one Balance
   * const balance = await prisma.balance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BalanceUpdateArgs>(args: Prisma.SelectSubset<T, BalanceUpdateArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Balances.
   * @param {BalanceDeleteManyArgs} args - Arguments to filter Balances to delete.
   * @example
   * // Delete a few Balances
   * const { count } = await prisma.balance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BalanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, BalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Balances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Balances
   * const balance = await prisma.balance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BalanceUpdateManyArgs>(args: Prisma.SelectSubset<T, BalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Balances and returns the data updated in the database.
   * @param {BalanceUpdateManyAndReturnArgs} args - Arguments to update many Balances.
   * @example
   * // Update many Balances
   * const balance = await prisma.balance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Balances and only return the `id`
   * const balanceWithIdOnly = await prisma.balance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BalanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BalanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Balance.
   * @param {BalanceUpsertArgs} args - Arguments to update or create a Balance.
   * @example
   * // Update or create a Balance
   * const balance = await prisma.balance.upsert({
   *   create: {
   *     // ... data to create a Balance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Balance we want to update
   *   }
   * })
   */
  upsert<T extends BalanceUpsertArgs>(args: Prisma.SelectSubset<T, BalanceUpsertArgs<ExtArgs>>): Prisma.Prisma__BalanceClient<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Balances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceCountArgs} args - Arguments to filter Balances to count.
   * @example
   * // Count the number of Balances
   * const count = await prisma.balance.count({
   *   where: {
   *     // ... the filter for the Balances we want to count
   *   }
   * })
  **/
  count<T extends BalanceCountArgs>(
    args?: Prisma.Subset<T, BalanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BalanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Balance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BalanceAggregateArgs>(args: Prisma.Subset<T, BalanceAggregateArgs>): Prisma.PrismaPromise<GetBalanceAggregateType<T>>

  /**
   * Group by Balance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BalanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BalanceGroupByArgs['orderBy'] }
      : { orderBy?: BalanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Balance model
 */
readonly fields: BalanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Balance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BalanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Balance model
 */
export interface BalanceFieldRefs {
  readonly id: Prisma.FieldRef<"Balance", 'Int'>
  readonly userId: Prisma.FieldRef<"Balance", 'Int'>
  readonly amount: Prisma.FieldRef<"Balance", 'Int'>
  readonly locked: Prisma.FieldRef<"Balance", 'Int'>
}
    

// Custom InputTypes
/**
 * Balance findUnique
 */
export type BalanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * Filter, which Balance to fetch.
   */
  where: Prisma.BalanceWhereUniqueInput
}

/**
 * Balance findUniqueOrThrow
 */
export type BalanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * Filter, which Balance to fetch.
   */
  where: Prisma.BalanceWhereUniqueInput
}

/**
 * Balance findFirst
 */
export type BalanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * Filter, which Balance to fetch.
   */
  where?: Prisma.BalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Balances to fetch.
   */
  orderBy?: Prisma.BalanceOrderByWithRelationInput | Prisma.BalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Balances.
   */
  cursor?: Prisma.BalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Balances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Balances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Balances.
   */
  distinct?: Prisma.BalanceScalarFieldEnum | Prisma.BalanceScalarFieldEnum[]
}

/**
 * Balance findFirstOrThrow
 */
export type BalanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * Filter, which Balance to fetch.
   */
  where?: Prisma.BalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Balances to fetch.
   */
  orderBy?: Prisma.BalanceOrderByWithRelationInput | Prisma.BalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Balances.
   */
  cursor?: Prisma.BalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Balances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Balances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Balances.
   */
  distinct?: Prisma.BalanceScalarFieldEnum | Prisma.BalanceScalarFieldEnum[]
}

/**
 * Balance findMany
 */
export type BalanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * Filter, which Balances to fetch.
   */
  where?: Prisma.BalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Balances to fetch.
   */
  orderBy?: Prisma.BalanceOrderByWithRelationInput | Prisma.BalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Balances.
   */
  cursor?: Prisma.BalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Balances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Balances.
   */
  skip?: number
  distinct?: Prisma.BalanceScalarFieldEnum | Prisma.BalanceScalarFieldEnum[]
}

/**
 * Balance create
 */
export type BalanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * The data needed to create a Balance.
   */
  data: Prisma.XOR<Prisma.BalanceCreateInput, Prisma.BalanceUncheckedCreateInput>
}

/**
 * Balance createMany
 */
export type BalanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Balances.
   */
  data: Prisma.BalanceCreateManyInput | Prisma.BalanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Balance createManyAndReturn
 */
export type BalanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * The data used to create many Balances.
   */
  data: Prisma.BalanceCreateManyInput | Prisma.BalanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Balance update
 */
export type BalanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * The data needed to update a Balance.
   */
  data: Prisma.XOR<Prisma.BalanceUpdateInput, Prisma.BalanceUncheckedUpdateInput>
  /**
   * Choose, which Balance to update.
   */
  where: Prisma.BalanceWhereUniqueInput
}

/**
 * Balance updateMany
 */
export type BalanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Balances.
   */
  data: Prisma.XOR<Prisma.BalanceUpdateManyMutationInput, Prisma.BalanceUncheckedUpdateManyInput>
  /**
   * Filter which Balances to update
   */
  where?: Prisma.BalanceWhereInput
  /**
   * Limit how many Balances to update.
   */
  limit?: number
}

/**
 * Balance updateManyAndReturn
 */
export type BalanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * The data used to update Balances.
   */
  data: Prisma.XOR<Prisma.BalanceUpdateManyMutationInput, Prisma.BalanceUncheckedUpdateManyInput>
  /**
   * Filter which Balances to update
   */
  where?: Prisma.BalanceWhereInput
  /**
   * Limit how many Balances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Balance upsert
 */
export type BalanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * The filter to search for the Balance to update in case it exists.
   */
  where: Prisma.BalanceWhereUniqueInput
  /**
   * In case the Balance found by the `where` argument doesn't exist, create a new Balance with this data.
   */
  create: Prisma.XOR<Prisma.BalanceCreateInput, Prisma.BalanceUncheckedCreateInput>
  /**
   * In case the Balance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BalanceUpdateInput, Prisma.BalanceUncheckedUpdateInput>
}

/**
 * Balance delete
 */
export type BalanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  /**
   * Filter which Balance to delete.
   */
  where: Prisma.BalanceWhereUniqueInput
}

/**
 * Balance deleteMany
 */
export type BalanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Balances to delete
   */
  where?: Prisma.BalanceWhereInput
  /**
   * Limit how many Balances to delete.
   */
  limit?: number
}

/**
 * Balance without action
 */
export type BalanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
}
