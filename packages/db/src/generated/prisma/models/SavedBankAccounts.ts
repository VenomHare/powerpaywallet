
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `SavedBankAccounts` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model SavedBankAccounts
 * 
 */
export type SavedBankAccountsModel = runtime.Types.Result.DefaultSelection<Prisma.$SavedBankAccountsPayload>

export type AggregateSavedBankAccounts = {
  _count: SavedBankAccountsCountAggregateOutputType | null
  _avg: SavedBankAccountsAvgAggregateOutputType | null
  _sum: SavedBankAccountsSumAggregateOutputType | null
  _min: SavedBankAccountsMinAggregateOutputType | null
  _max: SavedBankAccountsMaxAggregateOutputType | null
}

export type SavedBankAccountsAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type SavedBankAccountsSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type SavedBankAccountsMinAggregateOutputType = {
  id: number | null
  bankCode: string | null
  accountNumber: string | null
  holderName: string | null
  label: string | null
  userId: number | null
  isDeleted: boolean | null
}

export type SavedBankAccountsMaxAggregateOutputType = {
  id: number | null
  bankCode: string | null
  accountNumber: string | null
  holderName: string | null
  label: string | null
  userId: number | null
  isDeleted: boolean | null
}

export type SavedBankAccountsCountAggregateOutputType = {
  id: number
  bankCode: number
  accountNumber: number
  holderName: number
  label: number
  userId: number
  isDeleted: number
  _all: number
}


export type SavedBankAccountsAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type SavedBankAccountsSumAggregateInputType = {
  id?: true
  userId?: true
}

export type SavedBankAccountsMinAggregateInputType = {
  id?: true
  bankCode?: true
  accountNumber?: true
  holderName?: true
  label?: true
  userId?: true
  isDeleted?: true
}

export type SavedBankAccountsMaxAggregateInputType = {
  id?: true
  bankCode?: true
  accountNumber?: true
  holderName?: true
  label?: true
  userId?: true
  isDeleted?: true
}

export type SavedBankAccountsCountAggregateInputType = {
  id?: true
  bankCode?: true
  accountNumber?: true
  holderName?: true
  label?: true
  userId?: true
  isDeleted?: true
  _all?: true
}

export type SavedBankAccountsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SavedBankAccounts to aggregate.
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SavedBankAccounts to fetch.
   */
  orderBy?: Prisma.SavedBankAccountsOrderByWithRelationInput | Prisma.SavedBankAccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SavedBankAccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SavedBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SavedBankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SavedBankAccounts
  **/
  _count?: true | SavedBankAccountsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SavedBankAccountsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SavedBankAccountsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SavedBankAccountsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SavedBankAccountsMaxAggregateInputType
}

export type GetSavedBankAccountsAggregateType<T extends SavedBankAccountsAggregateArgs> = {
      [P in keyof T & keyof AggregateSavedBankAccounts]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSavedBankAccounts[P]>
    : Prisma.GetScalarType<T[P], AggregateSavedBankAccounts[P]>
}




export type SavedBankAccountsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SavedBankAccountsWhereInput
  orderBy?: Prisma.SavedBankAccountsOrderByWithAggregationInput | Prisma.SavedBankAccountsOrderByWithAggregationInput[]
  by: Prisma.SavedBankAccountsScalarFieldEnum[] | Prisma.SavedBankAccountsScalarFieldEnum
  having?: Prisma.SavedBankAccountsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SavedBankAccountsCountAggregateInputType | true
  _avg?: SavedBankAccountsAvgAggregateInputType
  _sum?: SavedBankAccountsSumAggregateInputType
  _min?: SavedBankAccountsMinAggregateInputType
  _max?: SavedBankAccountsMaxAggregateInputType
}

export type SavedBankAccountsGroupByOutputType = {
  id: number
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  userId: number
  isDeleted: boolean
  _count: SavedBankAccountsCountAggregateOutputType | null
  _avg: SavedBankAccountsAvgAggregateOutputType | null
  _sum: SavedBankAccountsSumAggregateOutputType | null
  _min: SavedBankAccountsMinAggregateOutputType | null
  _max: SavedBankAccountsMaxAggregateOutputType | null
}

type GetSavedBankAccountsGroupByPayload<T extends SavedBankAccountsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SavedBankAccountsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SavedBankAccountsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SavedBankAccountsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SavedBankAccountsGroupByOutputType[P]>
      }
    >
  >



export type SavedBankAccountsWhereInput = {
  AND?: Prisma.SavedBankAccountsWhereInput | Prisma.SavedBankAccountsWhereInput[]
  OR?: Prisma.SavedBankAccountsWhereInput[]
  NOT?: Prisma.SavedBankAccountsWhereInput | Prisma.SavedBankAccountsWhereInput[]
  id?: Prisma.IntFilter<"SavedBankAccounts"> | number
  bankCode?: Prisma.StringFilter<"SavedBankAccounts"> | string
  accountNumber?: Prisma.StringFilter<"SavedBankAccounts"> | string
  holderName?: Prisma.StringFilter<"SavedBankAccounts"> | string
  label?: Prisma.StringFilter<"SavedBankAccounts"> | string
  userId?: Prisma.IntFilter<"SavedBankAccounts"> | number
  isDeleted?: Prisma.BoolFilter<"SavedBankAccounts"> | boolean
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Withdrawals?: Prisma.BankWithdrawalsListRelationFilter
}

export type SavedBankAccountsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  bankCode?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  holderName?: Prisma.SortOrder
  label?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
  Withdrawals?: Prisma.BankWithdrawalsOrderByRelationAggregateInput
}

export type SavedBankAccountsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SavedBankAccountsWhereInput | Prisma.SavedBankAccountsWhereInput[]
  OR?: Prisma.SavedBankAccountsWhereInput[]
  NOT?: Prisma.SavedBankAccountsWhereInput | Prisma.SavedBankAccountsWhereInput[]
  bankCode?: Prisma.StringFilter<"SavedBankAccounts"> | string
  accountNumber?: Prisma.StringFilter<"SavedBankAccounts"> | string
  holderName?: Prisma.StringFilter<"SavedBankAccounts"> | string
  label?: Prisma.StringFilter<"SavedBankAccounts"> | string
  userId?: Prisma.IntFilter<"SavedBankAccounts"> | number
  isDeleted?: Prisma.BoolFilter<"SavedBankAccounts"> | boolean
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Withdrawals?: Prisma.BankWithdrawalsListRelationFilter
}, "id">

export type SavedBankAccountsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  bankCode?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  holderName?: Prisma.SortOrder
  label?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  _count?: Prisma.SavedBankAccountsCountOrderByAggregateInput
  _avg?: Prisma.SavedBankAccountsAvgOrderByAggregateInput
  _max?: Prisma.SavedBankAccountsMaxOrderByAggregateInput
  _min?: Prisma.SavedBankAccountsMinOrderByAggregateInput
  _sum?: Prisma.SavedBankAccountsSumOrderByAggregateInput
}

export type SavedBankAccountsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SavedBankAccountsScalarWhereWithAggregatesInput | Prisma.SavedBankAccountsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SavedBankAccountsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SavedBankAccountsScalarWhereWithAggregatesInput | Prisma.SavedBankAccountsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"SavedBankAccounts"> | number
  bankCode?: Prisma.StringWithAggregatesFilter<"SavedBankAccounts"> | string
  accountNumber?: Prisma.StringWithAggregatesFilter<"SavedBankAccounts"> | string
  holderName?: Prisma.StringWithAggregatesFilter<"SavedBankAccounts"> | string
  label?: Prisma.StringWithAggregatesFilter<"SavedBankAccounts"> | string
  userId?: Prisma.IntWithAggregatesFilter<"SavedBankAccounts"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"SavedBankAccounts"> | boolean
}

export type SavedBankAccountsCreateInput = {
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  isDeleted?: boolean
  User: Prisma.UserCreateNestedOneWithoutSavedBankAccountsInput
  Withdrawals?: Prisma.BankWithdrawalsCreateNestedManyWithoutAccountInput
}

export type SavedBankAccountsUncheckedCreateInput = {
  id?: number
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  userId: number
  isDeleted?: boolean
  Withdrawals?: Prisma.BankWithdrawalsUncheckedCreateNestedManyWithoutAccountInput
}

export type SavedBankAccountsUpdateInput = {
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  User?: Prisma.UserUpdateOneRequiredWithoutSavedBankAccountsNestedInput
  Withdrawals?: Prisma.BankWithdrawalsUpdateManyWithoutAccountNestedInput
}

export type SavedBankAccountsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Withdrawals?: Prisma.BankWithdrawalsUncheckedUpdateManyWithoutAccountNestedInput
}

export type SavedBankAccountsCreateManyInput = {
  id?: number
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  userId: number
  isDeleted?: boolean
}

export type SavedBankAccountsUpdateManyMutationInput = {
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type SavedBankAccountsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type SavedBankAccountsListRelationFilter = {
  every?: Prisma.SavedBankAccountsWhereInput
  some?: Prisma.SavedBankAccountsWhereInput
  none?: Prisma.SavedBankAccountsWhereInput
}

export type SavedBankAccountsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SavedBankAccountsScalarRelationFilter = {
  is?: Prisma.SavedBankAccountsWhereInput
  isNot?: Prisma.SavedBankAccountsWhereInput
}

export type SavedBankAccountsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bankCode?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  holderName?: Prisma.SortOrder
  label?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type SavedBankAccountsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SavedBankAccountsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bankCode?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  holderName?: Prisma.SortOrder
  label?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type SavedBankAccountsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bankCode?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  holderName?: Prisma.SortOrder
  label?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type SavedBankAccountsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type SavedBankAccountsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutUserInput, Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput> | Prisma.SavedBankAccountsCreateWithoutUserInput[] | Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput | Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SavedBankAccountsCreateManyUserInputEnvelope
  connect?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
}

export type SavedBankAccountsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutUserInput, Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput> | Prisma.SavedBankAccountsCreateWithoutUserInput[] | Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput | Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SavedBankAccountsCreateManyUserInputEnvelope
  connect?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
}

export type SavedBankAccountsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutUserInput, Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput> | Prisma.SavedBankAccountsCreateWithoutUserInput[] | Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput | Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SavedBankAccountsUpsertWithWhereUniqueWithoutUserInput | Prisma.SavedBankAccountsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SavedBankAccountsCreateManyUserInputEnvelope
  set?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  disconnect?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  delete?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  connect?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  update?: Prisma.SavedBankAccountsUpdateWithWhereUniqueWithoutUserInput | Prisma.SavedBankAccountsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SavedBankAccountsUpdateManyWithWhereWithoutUserInput | Prisma.SavedBankAccountsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SavedBankAccountsScalarWhereInput | Prisma.SavedBankAccountsScalarWhereInput[]
}

export type SavedBankAccountsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutUserInput, Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput> | Prisma.SavedBankAccountsCreateWithoutUserInput[] | Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput | Prisma.SavedBankAccountsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SavedBankAccountsUpsertWithWhereUniqueWithoutUserInput | Prisma.SavedBankAccountsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SavedBankAccountsCreateManyUserInputEnvelope
  set?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  disconnect?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  delete?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  connect?: Prisma.SavedBankAccountsWhereUniqueInput | Prisma.SavedBankAccountsWhereUniqueInput[]
  update?: Prisma.SavedBankAccountsUpdateWithWhereUniqueWithoutUserInput | Prisma.SavedBankAccountsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SavedBankAccountsUpdateManyWithWhereWithoutUserInput | Prisma.SavedBankAccountsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SavedBankAccountsScalarWhereInput | Prisma.SavedBankAccountsScalarWhereInput[]
}

export type SavedBankAccountsCreateNestedOneWithoutWithdrawalsInput = {
  create?: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutWithdrawalsInput, Prisma.SavedBankAccountsUncheckedCreateWithoutWithdrawalsInput>
  connectOrCreate?: Prisma.SavedBankAccountsCreateOrConnectWithoutWithdrawalsInput
  connect?: Prisma.SavedBankAccountsWhereUniqueInput
}

export type SavedBankAccountsUpdateOneRequiredWithoutWithdrawalsNestedInput = {
  create?: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutWithdrawalsInput, Prisma.SavedBankAccountsUncheckedCreateWithoutWithdrawalsInput>
  connectOrCreate?: Prisma.SavedBankAccountsCreateOrConnectWithoutWithdrawalsInput
  upsert?: Prisma.SavedBankAccountsUpsertWithoutWithdrawalsInput
  connect?: Prisma.SavedBankAccountsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SavedBankAccountsUpdateToOneWithWhereWithoutWithdrawalsInput, Prisma.SavedBankAccountsUpdateWithoutWithdrawalsInput>, Prisma.SavedBankAccountsUncheckedUpdateWithoutWithdrawalsInput>
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type SavedBankAccountsCreateWithoutUserInput = {
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  isDeleted?: boolean
  Withdrawals?: Prisma.BankWithdrawalsCreateNestedManyWithoutAccountInput
}

export type SavedBankAccountsUncheckedCreateWithoutUserInput = {
  id?: number
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  isDeleted?: boolean
  Withdrawals?: Prisma.BankWithdrawalsUncheckedCreateNestedManyWithoutAccountInput
}

export type SavedBankAccountsCreateOrConnectWithoutUserInput = {
  where: Prisma.SavedBankAccountsWhereUniqueInput
  create: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutUserInput, Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput>
}

export type SavedBankAccountsCreateManyUserInputEnvelope = {
  data: Prisma.SavedBankAccountsCreateManyUserInput | Prisma.SavedBankAccountsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type SavedBankAccountsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SavedBankAccountsWhereUniqueInput
  update: Prisma.XOR<Prisma.SavedBankAccountsUpdateWithoutUserInput, Prisma.SavedBankAccountsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutUserInput, Prisma.SavedBankAccountsUncheckedCreateWithoutUserInput>
}

export type SavedBankAccountsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SavedBankAccountsWhereUniqueInput
  data: Prisma.XOR<Prisma.SavedBankAccountsUpdateWithoutUserInput, Prisma.SavedBankAccountsUncheckedUpdateWithoutUserInput>
}

export type SavedBankAccountsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SavedBankAccountsScalarWhereInput
  data: Prisma.XOR<Prisma.SavedBankAccountsUpdateManyMutationInput, Prisma.SavedBankAccountsUncheckedUpdateManyWithoutUserInput>
}

export type SavedBankAccountsScalarWhereInput = {
  AND?: Prisma.SavedBankAccountsScalarWhereInput | Prisma.SavedBankAccountsScalarWhereInput[]
  OR?: Prisma.SavedBankAccountsScalarWhereInput[]
  NOT?: Prisma.SavedBankAccountsScalarWhereInput | Prisma.SavedBankAccountsScalarWhereInput[]
  id?: Prisma.IntFilter<"SavedBankAccounts"> | number
  bankCode?: Prisma.StringFilter<"SavedBankAccounts"> | string
  accountNumber?: Prisma.StringFilter<"SavedBankAccounts"> | string
  holderName?: Prisma.StringFilter<"SavedBankAccounts"> | string
  label?: Prisma.StringFilter<"SavedBankAccounts"> | string
  userId?: Prisma.IntFilter<"SavedBankAccounts"> | number
  isDeleted?: Prisma.BoolFilter<"SavedBankAccounts"> | boolean
}

export type SavedBankAccountsCreateWithoutWithdrawalsInput = {
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  isDeleted?: boolean
  User: Prisma.UserCreateNestedOneWithoutSavedBankAccountsInput
}

export type SavedBankAccountsUncheckedCreateWithoutWithdrawalsInput = {
  id?: number
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  userId: number
  isDeleted?: boolean
}

export type SavedBankAccountsCreateOrConnectWithoutWithdrawalsInput = {
  where: Prisma.SavedBankAccountsWhereUniqueInput
  create: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutWithdrawalsInput, Prisma.SavedBankAccountsUncheckedCreateWithoutWithdrawalsInput>
}

export type SavedBankAccountsUpsertWithoutWithdrawalsInput = {
  update: Prisma.XOR<Prisma.SavedBankAccountsUpdateWithoutWithdrawalsInput, Prisma.SavedBankAccountsUncheckedUpdateWithoutWithdrawalsInput>
  create: Prisma.XOR<Prisma.SavedBankAccountsCreateWithoutWithdrawalsInput, Prisma.SavedBankAccountsUncheckedCreateWithoutWithdrawalsInput>
  where?: Prisma.SavedBankAccountsWhereInput
}

export type SavedBankAccountsUpdateToOneWithWhereWithoutWithdrawalsInput = {
  where?: Prisma.SavedBankAccountsWhereInput
  data: Prisma.XOR<Prisma.SavedBankAccountsUpdateWithoutWithdrawalsInput, Prisma.SavedBankAccountsUncheckedUpdateWithoutWithdrawalsInput>
}

export type SavedBankAccountsUpdateWithoutWithdrawalsInput = {
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  User?: Prisma.UserUpdateOneRequiredWithoutSavedBankAccountsNestedInput
}

export type SavedBankAccountsUncheckedUpdateWithoutWithdrawalsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type SavedBankAccountsCreateManyUserInput = {
  id?: number
  bankCode: string
  accountNumber: string
  holderName: string
  label: string
  isDeleted?: boolean
}

export type SavedBankAccountsUpdateWithoutUserInput = {
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Withdrawals?: Prisma.BankWithdrawalsUpdateManyWithoutAccountNestedInput
}

export type SavedBankAccountsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Withdrawals?: Prisma.BankWithdrawalsUncheckedUpdateManyWithoutAccountNestedInput
}

export type SavedBankAccountsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bankCode?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  holderName?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type SavedBankAccountsCountOutputType
 */

export type SavedBankAccountsCountOutputType = {
  Withdrawals: number
}

export type SavedBankAccountsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Withdrawals?: boolean | SavedBankAccountsCountOutputTypeCountWithdrawalsArgs
}

/**
 * SavedBankAccountsCountOutputType without action
 */
export type SavedBankAccountsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccountsCountOutputType
   */
  select?: Prisma.SavedBankAccountsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SavedBankAccountsCountOutputType without action
 */
export type SavedBankAccountsCountOutputTypeCountWithdrawalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BankWithdrawalsWhereInput
}


export type SavedBankAccountsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bankCode?: boolean
  accountNumber?: boolean
  holderName?: boolean
  label?: boolean
  userId?: boolean
  isDeleted?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Withdrawals?: boolean | Prisma.SavedBankAccounts$WithdrawalsArgs<ExtArgs>
  _count?: boolean | Prisma.SavedBankAccountsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["savedBankAccounts"]>

export type SavedBankAccountsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bankCode?: boolean
  accountNumber?: boolean
  holderName?: boolean
  label?: boolean
  userId?: boolean
  isDeleted?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["savedBankAccounts"]>

export type SavedBankAccountsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bankCode?: boolean
  accountNumber?: boolean
  holderName?: boolean
  label?: boolean
  userId?: boolean
  isDeleted?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["savedBankAccounts"]>

export type SavedBankAccountsSelectScalar = {
  id?: boolean
  bankCode?: boolean
  accountNumber?: boolean
  holderName?: boolean
  label?: boolean
  userId?: boolean
  isDeleted?: boolean
}

export type SavedBankAccountsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "bankCode" | "accountNumber" | "holderName" | "label" | "userId" | "isDeleted", ExtArgs["result"]["savedBankAccounts"]>
export type SavedBankAccountsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Withdrawals?: boolean | Prisma.SavedBankAccounts$WithdrawalsArgs<ExtArgs>
  _count?: boolean | Prisma.SavedBankAccountsCountOutputTypeDefaultArgs<ExtArgs>
}
export type SavedBankAccountsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SavedBankAccountsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SavedBankAccountsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SavedBankAccounts"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
    Withdrawals: Prisma.$BankWithdrawalsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    bankCode: string
    accountNumber: string
    holderName: string
    label: string
    userId: number
    isDeleted: boolean
  }, ExtArgs["result"]["savedBankAccounts"]>
  composites: {}
}

export type SavedBankAccountsGetPayload<S extends boolean | null | undefined | SavedBankAccountsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload, S>

export type SavedBankAccountsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SavedBankAccountsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SavedBankAccountsCountAggregateInputType | true
  }

export interface SavedBankAccountsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedBankAccounts'], meta: { name: 'SavedBankAccounts' } }
  /**
   * Find zero or one SavedBankAccounts that matches the filter.
   * @param {SavedBankAccountsFindUniqueArgs} args - Arguments to find a SavedBankAccounts
   * @example
   * // Get one SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SavedBankAccountsFindUniqueArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SavedBankAccounts that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SavedBankAccountsFindUniqueOrThrowArgs} args - Arguments to find a SavedBankAccounts
   * @example
   * // Get one SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SavedBankAccountsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SavedBankAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsFindFirstArgs} args - Arguments to find a SavedBankAccounts
   * @example
   * // Get one SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SavedBankAccountsFindFirstArgs>(args?: Prisma.SelectSubset<T, SavedBankAccountsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SavedBankAccounts that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsFindFirstOrThrowArgs} args - Arguments to find a SavedBankAccounts
   * @example
   * // Get one SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SavedBankAccountsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SavedBankAccountsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SavedBankAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.findMany()
   * 
   * // Get first 10 SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const savedBankAccountsWithIdOnly = await prisma.savedBankAccounts.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SavedBankAccountsFindManyArgs>(args?: Prisma.SelectSubset<T, SavedBankAccountsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SavedBankAccounts.
   * @param {SavedBankAccountsCreateArgs} args - Arguments to create a SavedBankAccounts.
   * @example
   * // Create one SavedBankAccounts
   * const SavedBankAccounts = await prisma.savedBankAccounts.create({
   *   data: {
   *     // ... data to create a SavedBankAccounts
   *   }
   * })
   * 
   */
  create<T extends SavedBankAccountsCreateArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsCreateArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SavedBankAccounts.
   * @param {SavedBankAccountsCreateManyArgs} args - Arguments to create many SavedBankAccounts.
   * @example
   * // Create many SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SavedBankAccountsCreateManyArgs>(args?: Prisma.SelectSubset<T, SavedBankAccountsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SavedBankAccounts and returns the data saved in the database.
   * @param {SavedBankAccountsCreateManyAndReturnArgs} args - Arguments to create many SavedBankAccounts.
   * @example
   * // Create many SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SavedBankAccounts and only return the `id`
   * const savedBankAccountsWithIdOnly = await prisma.savedBankAccounts.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SavedBankAccountsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SavedBankAccountsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SavedBankAccounts.
   * @param {SavedBankAccountsDeleteArgs} args - Arguments to delete one SavedBankAccounts.
   * @example
   * // Delete one SavedBankAccounts
   * const SavedBankAccounts = await prisma.savedBankAccounts.delete({
   *   where: {
   *     // ... filter to delete one SavedBankAccounts
   *   }
   * })
   * 
   */
  delete<T extends SavedBankAccountsDeleteArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsDeleteArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SavedBankAccounts.
   * @param {SavedBankAccountsUpdateArgs} args - Arguments to update one SavedBankAccounts.
   * @example
   * // Update one SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SavedBankAccountsUpdateArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsUpdateArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SavedBankAccounts.
   * @param {SavedBankAccountsDeleteManyArgs} args - Arguments to filter SavedBankAccounts to delete.
   * @example
   * // Delete a few SavedBankAccounts
   * const { count } = await prisma.savedBankAccounts.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SavedBankAccountsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SavedBankAccountsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SavedBankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SavedBankAccountsUpdateManyArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SavedBankAccounts and returns the data updated in the database.
   * @param {SavedBankAccountsUpdateManyAndReturnArgs} args - Arguments to update many SavedBankAccounts.
   * @example
   * // Update many SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SavedBankAccounts and only return the `id`
   * const savedBankAccountsWithIdOnly = await prisma.savedBankAccounts.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SavedBankAccountsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SavedBankAccounts.
   * @param {SavedBankAccountsUpsertArgs} args - Arguments to update or create a SavedBankAccounts.
   * @example
   * // Update or create a SavedBankAccounts
   * const savedBankAccounts = await prisma.savedBankAccounts.upsert({
   *   create: {
   *     // ... data to create a SavedBankAccounts
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SavedBankAccounts we want to update
   *   }
   * })
   */
  upsert<T extends SavedBankAccountsUpsertArgs>(args: Prisma.SelectSubset<T, SavedBankAccountsUpsertArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SavedBankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsCountArgs} args - Arguments to filter SavedBankAccounts to count.
   * @example
   * // Count the number of SavedBankAccounts
   * const count = await prisma.savedBankAccounts.count({
   *   where: {
   *     // ... the filter for the SavedBankAccounts we want to count
   *   }
   * })
  **/
  count<T extends SavedBankAccountsCountArgs>(
    args?: Prisma.Subset<T, SavedBankAccountsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SavedBankAccountsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SavedBankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SavedBankAccountsAggregateArgs>(args: Prisma.Subset<T, SavedBankAccountsAggregateArgs>): Prisma.PrismaPromise<GetSavedBankAccountsAggregateType<T>>

  /**
   * Group by SavedBankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SavedBankAccountsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SavedBankAccountsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SavedBankAccountsGroupByArgs['orderBy'] }
      : { orderBy?: SavedBankAccountsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SavedBankAccountsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedBankAccountsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SavedBankAccounts model
 */
readonly fields: SavedBankAccountsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SavedBankAccounts.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SavedBankAccountsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Withdrawals<T extends Prisma.SavedBankAccounts$WithdrawalsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SavedBankAccounts$WithdrawalsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SavedBankAccounts model
 */
export interface SavedBankAccountsFieldRefs {
  readonly id: Prisma.FieldRef<"SavedBankAccounts", 'Int'>
  readonly bankCode: Prisma.FieldRef<"SavedBankAccounts", 'String'>
  readonly accountNumber: Prisma.FieldRef<"SavedBankAccounts", 'String'>
  readonly holderName: Prisma.FieldRef<"SavedBankAccounts", 'String'>
  readonly label: Prisma.FieldRef<"SavedBankAccounts", 'String'>
  readonly userId: Prisma.FieldRef<"SavedBankAccounts", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"SavedBankAccounts", 'Boolean'>
}
    

// Custom InputTypes
/**
 * SavedBankAccounts findUnique
 */
export type SavedBankAccountsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * Filter, which SavedBankAccounts to fetch.
   */
  where: Prisma.SavedBankAccountsWhereUniqueInput
}

/**
 * SavedBankAccounts findUniqueOrThrow
 */
export type SavedBankAccountsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * Filter, which SavedBankAccounts to fetch.
   */
  where: Prisma.SavedBankAccountsWhereUniqueInput
}

/**
 * SavedBankAccounts findFirst
 */
export type SavedBankAccountsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * Filter, which SavedBankAccounts to fetch.
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SavedBankAccounts to fetch.
   */
  orderBy?: Prisma.SavedBankAccountsOrderByWithRelationInput | Prisma.SavedBankAccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SavedBankAccounts.
   */
  cursor?: Prisma.SavedBankAccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SavedBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SavedBankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SavedBankAccounts.
   */
  distinct?: Prisma.SavedBankAccountsScalarFieldEnum | Prisma.SavedBankAccountsScalarFieldEnum[]
}

/**
 * SavedBankAccounts findFirstOrThrow
 */
export type SavedBankAccountsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * Filter, which SavedBankAccounts to fetch.
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SavedBankAccounts to fetch.
   */
  orderBy?: Prisma.SavedBankAccountsOrderByWithRelationInput | Prisma.SavedBankAccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SavedBankAccounts.
   */
  cursor?: Prisma.SavedBankAccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SavedBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SavedBankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SavedBankAccounts.
   */
  distinct?: Prisma.SavedBankAccountsScalarFieldEnum | Prisma.SavedBankAccountsScalarFieldEnum[]
}

/**
 * SavedBankAccounts findMany
 */
export type SavedBankAccountsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * Filter, which SavedBankAccounts to fetch.
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SavedBankAccounts to fetch.
   */
  orderBy?: Prisma.SavedBankAccountsOrderByWithRelationInput | Prisma.SavedBankAccountsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SavedBankAccounts.
   */
  cursor?: Prisma.SavedBankAccountsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SavedBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SavedBankAccounts.
   */
  skip?: number
  distinct?: Prisma.SavedBankAccountsScalarFieldEnum | Prisma.SavedBankAccountsScalarFieldEnum[]
}

/**
 * SavedBankAccounts create
 */
export type SavedBankAccountsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * The data needed to create a SavedBankAccounts.
   */
  data: Prisma.XOR<Prisma.SavedBankAccountsCreateInput, Prisma.SavedBankAccountsUncheckedCreateInput>
}

/**
 * SavedBankAccounts createMany
 */
export type SavedBankAccountsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SavedBankAccounts.
   */
  data: Prisma.SavedBankAccountsCreateManyInput | Prisma.SavedBankAccountsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SavedBankAccounts createManyAndReturn
 */
export type SavedBankAccountsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * The data used to create many SavedBankAccounts.
   */
  data: Prisma.SavedBankAccountsCreateManyInput | Prisma.SavedBankAccountsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SavedBankAccounts update
 */
export type SavedBankAccountsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * The data needed to update a SavedBankAccounts.
   */
  data: Prisma.XOR<Prisma.SavedBankAccountsUpdateInput, Prisma.SavedBankAccountsUncheckedUpdateInput>
  /**
   * Choose, which SavedBankAccounts to update.
   */
  where: Prisma.SavedBankAccountsWhereUniqueInput
}

/**
 * SavedBankAccounts updateMany
 */
export type SavedBankAccountsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SavedBankAccounts.
   */
  data: Prisma.XOR<Prisma.SavedBankAccountsUpdateManyMutationInput, Prisma.SavedBankAccountsUncheckedUpdateManyInput>
  /**
   * Filter which SavedBankAccounts to update
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * Limit how many SavedBankAccounts to update.
   */
  limit?: number
}

/**
 * SavedBankAccounts updateManyAndReturn
 */
export type SavedBankAccountsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * The data used to update SavedBankAccounts.
   */
  data: Prisma.XOR<Prisma.SavedBankAccountsUpdateManyMutationInput, Prisma.SavedBankAccountsUncheckedUpdateManyInput>
  /**
   * Filter which SavedBankAccounts to update
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * Limit how many SavedBankAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SavedBankAccounts upsert
 */
export type SavedBankAccountsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * The filter to search for the SavedBankAccounts to update in case it exists.
   */
  where: Prisma.SavedBankAccountsWhereUniqueInput
  /**
   * In case the SavedBankAccounts found by the `where` argument doesn't exist, create a new SavedBankAccounts with this data.
   */
  create: Prisma.XOR<Prisma.SavedBankAccountsCreateInput, Prisma.SavedBankAccountsUncheckedCreateInput>
  /**
   * In case the SavedBankAccounts was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SavedBankAccountsUpdateInput, Prisma.SavedBankAccountsUncheckedUpdateInput>
}

/**
 * SavedBankAccounts delete
 */
export type SavedBankAccountsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
  /**
   * Filter which SavedBankAccounts to delete.
   */
  where: Prisma.SavedBankAccountsWhereUniqueInput
}

/**
 * SavedBankAccounts deleteMany
 */
export type SavedBankAccountsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SavedBankAccounts to delete
   */
  where?: Prisma.SavedBankAccountsWhereInput
  /**
   * Limit how many SavedBankAccounts to delete.
   */
  limit?: number
}

/**
 * SavedBankAccounts.Withdrawals
 */
export type SavedBankAccounts$WithdrawalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  where?: Prisma.BankWithdrawalsWhereInput
  orderBy?: Prisma.BankWithdrawalsOrderByWithRelationInput | Prisma.BankWithdrawalsOrderByWithRelationInput[]
  cursor?: Prisma.BankWithdrawalsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BankWithdrawalsScalarFieldEnum | Prisma.BankWithdrawalsScalarFieldEnum[]
}

/**
 * SavedBankAccounts without action
 */
export type SavedBankAccountsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SavedBankAccounts
   */
  select?: Prisma.SavedBankAccountsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SavedBankAccounts
   */
  omit?: Prisma.SavedBankAccountsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SavedBankAccountsInclude<ExtArgs> | null
}
