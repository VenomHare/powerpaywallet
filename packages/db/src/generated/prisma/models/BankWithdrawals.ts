
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `BankWithdrawals` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model BankWithdrawals
 * 
 */
export type BankWithdrawalsModel = runtime.Types.Result.DefaultSelection<Prisma.$BankWithdrawalsPayload>

export type AggregateBankWithdrawals = {
  _count: BankWithdrawalsCountAggregateOutputType | null
  _avg: BankWithdrawalsAvgAggregateOutputType | null
  _sum: BankWithdrawalsSumAggregateOutputType | null
  _min: BankWithdrawalsMinAggregateOutputType | null
  _max: BankWithdrawalsMaxAggregateOutputType | null
}

export type BankWithdrawalsAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  accountId: number | null
  amount: number | null
  net_amount: number | null
  fee: number | null
}

export type BankWithdrawalsSumAggregateOutputType = {
  id: number | null
  userId: number | null
  accountId: number | null
  amount: number | null
  net_amount: number | null
  fee: number | null
}

export type BankWithdrawalsMinAggregateOutputType = {
  id: number | null
  token: string | null
  userId: number | null
  accountId: number | null
  amount: number | null
  net_amount: number | null
  fee: number | null
  gateway: $Enums.WithdrawalOption | null
  status: $Enums.ActionStatus | null
  updatedAt: Date | null
  startedAt: Date | null
}

export type BankWithdrawalsMaxAggregateOutputType = {
  id: number | null
  token: string | null
  userId: number | null
  accountId: number | null
  amount: number | null
  net_amount: number | null
  fee: number | null
  gateway: $Enums.WithdrawalOption | null
  status: $Enums.ActionStatus | null
  updatedAt: Date | null
  startedAt: Date | null
}

export type BankWithdrawalsCountAggregateOutputType = {
  id: number
  token: number
  userId: number
  accountId: number
  amount: number
  net_amount: number
  fee: number
  gateway: number
  status: number
  updatedAt: number
  startedAt: number
  _all: number
}


export type BankWithdrawalsAvgAggregateInputType = {
  id?: true
  userId?: true
  accountId?: true
  amount?: true
  net_amount?: true
  fee?: true
}

export type BankWithdrawalsSumAggregateInputType = {
  id?: true
  userId?: true
  accountId?: true
  amount?: true
  net_amount?: true
  fee?: true
}

export type BankWithdrawalsMinAggregateInputType = {
  id?: true
  token?: true
  userId?: true
  accountId?: true
  amount?: true
  net_amount?: true
  fee?: true
  gateway?: true
  status?: true
  updatedAt?: true
  startedAt?: true
}

export type BankWithdrawalsMaxAggregateInputType = {
  id?: true
  token?: true
  userId?: true
  accountId?: true
  amount?: true
  net_amount?: true
  fee?: true
  gateway?: true
  status?: true
  updatedAt?: true
  startedAt?: true
}

export type BankWithdrawalsCountAggregateInputType = {
  id?: true
  token?: true
  userId?: true
  accountId?: true
  amount?: true
  net_amount?: true
  fee?: true
  gateway?: true
  status?: true
  updatedAt?: true
  startedAt?: true
  _all?: true
}

export type BankWithdrawalsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BankWithdrawals to aggregate.
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankWithdrawals to fetch.
   */
  orderBy?: Prisma.BankWithdrawalsOrderByWithRelationInput | Prisma.BankWithdrawalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BankWithdrawalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankWithdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankWithdrawals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BankWithdrawals
  **/
  _count?: true | BankWithdrawalsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BankWithdrawalsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BankWithdrawalsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BankWithdrawalsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BankWithdrawalsMaxAggregateInputType
}

export type GetBankWithdrawalsAggregateType<T extends BankWithdrawalsAggregateArgs> = {
      [P in keyof T & keyof AggregateBankWithdrawals]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBankWithdrawals[P]>
    : Prisma.GetScalarType<T[P], AggregateBankWithdrawals[P]>
}




export type BankWithdrawalsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BankWithdrawalsWhereInput
  orderBy?: Prisma.BankWithdrawalsOrderByWithAggregationInput | Prisma.BankWithdrawalsOrderByWithAggregationInput[]
  by: Prisma.BankWithdrawalsScalarFieldEnum[] | Prisma.BankWithdrawalsScalarFieldEnum
  having?: Prisma.BankWithdrawalsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BankWithdrawalsCountAggregateInputType | true
  _avg?: BankWithdrawalsAvgAggregateInputType
  _sum?: BankWithdrawalsSumAggregateInputType
  _min?: BankWithdrawalsMinAggregateInputType
  _max?: BankWithdrawalsMaxAggregateInputType
}

export type BankWithdrawalsGroupByOutputType = {
  id: number
  token: string | null
  userId: number
  accountId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status: $Enums.ActionStatus
  updatedAt: Date
  startedAt: Date
  _count: BankWithdrawalsCountAggregateOutputType | null
  _avg: BankWithdrawalsAvgAggregateOutputType | null
  _sum: BankWithdrawalsSumAggregateOutputType | null
  _min: BankWithdrawalsMinAggregateOutputType | null
  _max: BankWithdrawalsMaxAggregateOutputType | null
}

type GetBankWithdrawalsGroupByPayload<T extends BankWithdrawalsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BankWithdrawalsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BankWithdrawalsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BankWithdrawalsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BankWithdrawalsGroupByOutputType[P]>
      }
    >
  >



export type BankWithdrawalsWhereInput = {
  AND?: Prisma.BankWithdrawalsWhereInput | Prisma.BankWithdrawalsWhereInput[]
  OR?: Prisma.BankWithdrawalsWhereInput[]
  NOT?: Prisma.BankWithdrawalsWhereInput | Prisma.BankWithdrawalsWhereInput[]
  id?: Prisma.IntFilter<"BankWithdrawals"> | number
  token?: Prisma.StringNullableFilter<"BankWithdrawals"> | string | null
  userId?: Prisma.IntFilter<"BankWithdrawals"> | number
  accountId?: Prisma.IntFilter<"BankWithdrawals"> | number
  amount?: Prisma.IntFilter<"BankWithdrawals"> | number
  net_amount?: Prisma.IntFilter<"BankWithdrawals"> | number
  fee?: Prisma.IntFilter<"BankWithdrawals"> | number
  gateway?: Prisma.EnumWithdrawalOptionFilter<"BankWithdrawals"> | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFilter<"BankWithdrawals"> | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFilter<"BankWithdrawals"> | Date | string
  startedAt?: Prisma.DateTimeFilter<"BankWithdrawals"> | Date | string
  account?: Prisma.XOR<Prisma.SavedBankAccountsScalarRelationFilter, Prisma.SavedBankAccountsWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type BankWithdrawalsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
  gateway?: Prisma.SortOrder
  status?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  account?: Prisma.SavedBankAccountsOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type BankWithdrawalsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  token?: string
  AND?: Prisma.BankWithdrawalsWhereInput | Prisma.BankWithdrawalsWhereInput[]
  OR?: Prisma.BankWithdrawalsWhereInput[]
  NOT?: Prisma.BankWithdrawalsWhereInput | Prisma.BankWithdrawalsWhereInput[]
  userId?: Prisma.IntFilter<"BankWithdrawals"> | number
  accountId?: Prisma.IntFilter<"BankWithdrawals"> | number
  amount?: Prisma.IntFilter<"BankWithdrawals"> | number
  net_amount?: Prisma.IntFilter<"BankWithdrawals"> | number
  fee?: Prisma.IntFilter<"BankWithdrawals"> | number
  gateway?: Prisma.EnumWithdrawalOptionFilter<"BankWithdrawals"> | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFilter<"BankWithdrawals"> | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFilter<"BankWithdrawals"> | Date | string
  startedAt?: Prisma.DateTimeFilter<"BankWithdrawals"> | Date | string
  account?: Prisma.XOR<Prisma.SavedBankAccountsScalarRelationFilter, Prisma.SavedBankAccountsWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "token">

export type BankWithdrawalsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
  gateway?: Prisma.SortOrder
  status?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  _count?: Prisma.BankWithdrawalsCountOrderByAggregateInput
  _avg?: Prisma.BankWithdrawalsAvgOrderByAggregateInput
  _max?: Prisma.BankWithdrawalsMaxOrderByAggregateInput
  _min?: Prisma.BankWithdrawalsMinOrderByAggregateInput
  _sum?: Prisma.BankWithdrawalsSumOrderByAggregateInput
}

export type BankWithdrawalsScalarWhereWithAggregatesInput = {
  AND?: Prisma.BankWithdrawalsScalarWhereWithAggregatesInput | Prisma.BankWithdrawalsScalarWhereWithAggregatesInput[]
  OR?: Prisma.BankWithdrawalsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BankWithdrawalsScalarWhereWithAggregatesInput | Prisma.BankWithdrawalsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"BankWithdrawals"> | number
  token?: Prisma.StringNullableWithAggregatesFilter<"BankWithdrawals"> | string | null
  userId?: Prisma.IntWithAggregatesFilter<"BankWithdrawals"> | number
  accountId?: Prisma.IntWithAggregatesFilter<"BankWithdrawals"> | number
  amount?: Prisma.IntWithAggregatesFilter<"BankWithdrawals"> | number
  net_amount?: Prisma.IntWithAggregatesFilter<"BankWithdrawals"> | number
  fee?: Prisma.IntWithAggregatesFilter<"BankWithdrawals"> | number
  gateway?: Prisma.EnumWithdrawalOptionWithAggregatesFilter<"BankWithdrawals"> | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusWithAggregatesFilter<"BankWithdrawals"> | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"BankWithdrawals"> | Date | string
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"BankWithdrawals"> | Date | string
}

export type BankWithdrawalsCreateInput = {
  token?: string | null
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
  account: Prisma.SavedBankAccountsCreateNestedOneWithoutWithdrawalsInput
  user: Prisma.UserCreateNestedOneWithoutBankWithdrawalsInput
}

export type BankWithdrawalsUncheckedCreateInput = {
  id?: number
  token?: string | null
  userId: number
  accountId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
}

export type BankWithdrawalsUpdateInput = {
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  account?: Prisma.SavedBankAccountsUpdateOneRequiredWithoutWithdrawalsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutBankWithdrawalsNestedInput
}

export type BankWithdrawalsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  accountId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankWithdrawalsCreateManyInput = {
  id?: number
  token?: string | null
  userId: number
  accountId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
}

export type BankWithdrawalsUpdateManyMutationInput = {
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankWithdrawalsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  accountId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankWithdrawalsListRelationFilter = {
  every?: Prisma.BankWithdrawalsWhereInput
  some?: Prisma.BankWithdrawalsWhereInput
  none?: Prisma.BankWithdrawalsWhereInput
}

export type BankWithdrawalsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BankWithdrawalsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
  gateway?: Prisma.SortOrder
  status?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
}

export type BankWithdrawalsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
}

export type BankWithdrawalsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
  gateway?: Prisma.SortOrder
  status?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
}

export type BankWithdrawalsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  token?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
  gateway?: Prisma.SortOrder
  status?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
}

export type BankWithdrawalsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  net_amount?: Prisma.SortOrder
  fee?: Prisma.SortOrder
}

export type BankWithdrawalsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutUserInput, Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput> | Prisma.BankWithdrawalsCreateWithoutUserInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput | Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyUserInputEnvelope
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
}

export type BankWithdrawalsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutUserInput, Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput> | Prisma.BankWithdrawalsCreateWithoutUserInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput | Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyUserInputEnvelope
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
}

export type BankWithdrawalsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutUserInput, Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput> | Prisma.BankWithdrawalsCreateWithoutUserInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput | Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutUserInput | Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyUserInputEnvelope
  set?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  disconnect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  delete?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  update?: Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutUserInput | Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BankWithdrawalsUpdateManyWithWhereWithoutUserInput | Prisma.BankWithdrawalsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BankWithdrawalsScalarWhereInput | Prisma.BankWithdrawalsScalarWhereInput[]
}

export type BankWithdrawalsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutUserInput, Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput> | Prisma.BankWithdrawalsCreateWithoutUserInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput | Prisma.BankWithdrawalsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutUserInput | Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyUserInputEnvelope
  set?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  disconnect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  delete?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  update?: Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutUserInput | Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BankWithdrawalsUpdateManyWithWhereWithoutUserInput | Prisma.BankWithdrawalsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BankWithdrawalsScalarWhereInput | Prisma.BankWithdrawalsScalarWhereInput[]
}

export type EnumWithdrawalOptionFieldUpdateOperationsInput = {
  set?: $Enums.WithdrawalOption
}

export type EnumActionStatusFieldUpdateOperationsInput = {
  set?: $Enums.ActionStatus
}

export type BankWithdrawalsCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput> | Prisma.BankWithdrawalsCreateWithoutAccountInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput | Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyAccountInputEnvelope
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
}

export type BankWithdrawalsUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput> | Prisma.BankWithdrawalsCreateWithoutAccountInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput | Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyAccountInputEnvelope
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
}

export type BankWithdrawalsUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput> | Prisma.BankWithdrawalsCreateWithoutAccountInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput | Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutAccountInput | Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyAccountInputEnvelope
  set?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  disconnect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  delete?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  update?: Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutAccountInput | Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.BankWithdrawalsUpdateManyWithWhereWithoutAccountInput | Prisma.BankWithdrawalsUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.BankWithdrawalsScalarWhereInput | Prisma.BankWithdrawalsScalarWhereInput[]
}

export type BankWithdrawalsUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput> | Prisma.BankWithdrawalsCreateWithoutAccountInput[] | Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput | Prisma.BankWithdrawalsCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutAccountInput | Prisma.BankWithdrawalsUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.BankWithdrawalsCreateManyAccountInputEnvelope
  set?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  disconnect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  delete?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  connect?: Prisma.BankWithdrawalsWhereUniqueInput | Prisma.BankWithdrawalsWhereUniqueInput[]
  update?: Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutAccountInput | Prisma.BankWithdrawalsUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.BankWithdrawalsUpdateManyWithWhereWithoutAccountInput | Prisma.BankWithdrawalsUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.BankWithdrawalsScalarWhereInput | Prisma.BankWithdrawalsScalarWhereInput[]
}

export type BankWithdrawalsCreateWithoutUserInput = {
  token?: string | null
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
  account: Prisma.SavedBankAccountsCreateNestedOneWithoutWithdrawalsInput
}

export type BankWithdrawalsUncheckedCreateWithoutUserInput = {
  id?: number
  token?: string | null
  accountId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
}

export type BankWithdrawalsCreateOrConnectWithoutUserInput = {
  where: Prisma.BankWithdrawalsWhereUniqueInput
  create: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutUserInput, Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput>
}

export type BankWithdrawalsCreateManyUserInputEnvelope = {
  data: Prisma.BankWithdrawalsCreateManyUserInput | Prisma.BankWithdrawalsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type BankWithdrawalsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BankWithdrawalsWhereUniqueInput
  update: Prisma.XOR<Prisma.BankWithdrawalsUpdateWithoutUserInput, Prisma.BankWithdrawalsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutUserInput, Prisma.BankWithdrawalsUncheckedCreateWithoutUserInput>
}

export type BankWithdrawalsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BankWithdrawalsWhereUniqueInput
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateWithoutUserInput, Prisma.BankWithdrawalsUncheckedUpdateWithoutUserInput>
}

export type BankWithdrawalsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BankWithdrawalsScalarWhereInput
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateManyMutationInput, Prisma.BankWithdrawalsUncheckedUpdateManyWithoutUserInput>
}

export type BankWithdrawalsScalarWhereInput = {
  AND?: Prisma.BankWithdrawalsScalarWhereInput | Prisma.BankWithdrawalsScalarWhereInput[]
  OR?: Prisma.BankWithdrawalsScalarWhereInput[]
  NOT?: Prisma.BankWithdrawalsScalarWhereInput | Prisma.BankWithdrawalsScalarWhereInput[]
  id?: Prisma.IntFilter<"BankWithdrawals"> | number
  token?: Prisma.StringNullableFilter<"BankWithdrawals"> | string | null
  userId?: Prisma.IntFilter<"BankWithdrawals"> | number
  accountId?: Prisma.IntFilter<"BankWithdrawals"> | number
  amount?: Prisma.IntFilter<"BankWithdrawals"> | number
  net_amount?: Prisma.IntFilter<"BankWithdrawals"> | number
  fee?: Prisma.IntFilter<"BankWithdrawals"> | number
  gateway?: Prisma.EnumWithdrawalOptionFilter<"BankWithdrawals"> | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFilter<"BankWithdrawals"> | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFilter<"BankWithdrawals"> | Date | string
  startedAt?: Prisma.DateTimeFilter<"BankWithdrawals"> | Date | string
}

export type BankWithdrawalsCreateWithoutAccountInput = {
  token?: string | null
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBankWithdrawalsInput
}

export type BankWithdrawalsUncheckedCreateWithoutAccountInput = {
  id?: number
  token?: string | null
  userId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
}

export type BankWithdrawalsCreateOrConnectWithoutAccountInput = {
  where: Prisma.BankWithdrawalsWhereUniqueInput
  create: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput>
}

export type BankWithdrawalsCreateManyAccountInputEnvelope = {
  data: Prisma.BankWithdrawalsCreateManyAccountInput | Prisma.BankWithdrawalsCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type BankWithdrawalsUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.BankWithdrawalsWhereUniqueInput
  update: Prisma.XOR<Prisma.BankWithdrawalsUpdateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.BankWithdrawalsCreateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedCreateWithoutAccountInput>
}

export type BankWithdrawalsUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.BankWithdrawalsWhereUniqueInput
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateWithoutAccountInput, Prisma.BankWithdrawalsUncheckedUpdateWithoutAccountInput>
}

export type BankWithdrawalsUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.BankWithdrawalsScalarWhereInput
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateManyMutationInput, Prisma.BankWithdrawalsUncheckedUpdateManyWithoutAccountInput>
}

export type BankWithdrawalsCreateManyUserInput = {
  id?: number
  token?: string | null
  accountId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
}

export type BankWithdrawalsUpdateWithoutUserInput = {
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  account?: Prisma.SavedBankAccountsUpdateOneRequiredWithoutWithdrawalsNestedInput
}

export type BankWithdrawalsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  accountId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankWithdrawalsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  accountId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankWithdrawalsCreateManyAccountInput = {
  id?: number
  token?: string | null
  userId: number
  amount: number
  net_amount: number
  fee: number
  gateway: $Enums.WithdrawalOption
  status?: $Enums.ActionStatus
  updatedAt?: Date | string
  startedAt?: Date | string
}

export type BankWithdrawalsUpdateWithoutAccountInput = {
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBankWithdrawalsNestedInput
}

export type BankWithdrawalsUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankWithdrawalsUncheckedUpdateManyWithoutAccountInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  net_amount?: Prisma.IntFieldUpdateOperationsInput | number
  fee?: Prisma.IntFieldUpdateOperationsInput | number
  gateway?: Prisma.EnumWithdrawalOptionFieldUpdateOperationsInput | $Enums.WithdrawalOption
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type BankWithdrawalsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  userId?: boolean
  accountId?: boolean
  amount?: boolean
  net_amount?: boolean
  fee?: boolean
  gateway?: boolean
  status?: boolean
  updatedAt?: boolean
  startedAt?: boolean
  account?: boolean | Prisma.SavedBankAccountsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankWithdrawals"]>

export type BankWithdrawalsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  userId?: boolean
  accountId?: boolean
  amount?: boolean
  net_amount?: boolean
  fee?: boolean
  gateway?: boolean
  status?: boolean
  updatedAt?: boolean
  startedAt?: boolean
  account?: boolean | Prisma.SavedBankAccountsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankWithdrawals"]>

export type BankWithdrawalsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  token?: boolean
  userId?: boolean
  accountId?: boolean
  amount?: boolean
  net_amount?: boolean
  fee?: boolean
  gateway?: boolean
  status?: boolean
  updatedAt?: boolean
  startedAt?: boolean
  account?: boolean | Prisma.SavedBankAccountsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankWithdrawals"]>

export type BankWithdrawalsSelectScalar = {
  id?: boolean
  token?: boolean
  userId?: boolean
  accountId?: boolean
  amount?: boolean
  net_amount?: boolean
  fee?: boolean
  gateway?: boolean
  status?: boolean
  updatedAt?: boolean
  startedAt?: boolean
}

export type BankWithdrawalsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "token" | "userId" | "accountId" | "amount" | "net_amount" | "fee" | "gateway" | "status" | "updatedAt" | "startedAt", ExtArgs["result"]["bankWithdrawals"]>
export type BankWithdrawalsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.SavedBankAccountsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BankWithdrawalsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.SavedBankAccountsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BankWithdrawalsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.SavedBankAccountsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $BankWithdrawalsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BankWithdrawals"
  objects: {
    account: Prisma.$SavedBankAccountsPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    token: string | null
    userId: number
    accountId: number
    amount: number
    net_amount: number
    fee: number
    gateway: $Enums.WithdrawalOption
    status: $Enums.ActionStatus
    updatedAt: Date
    startedAt: Date
  }, ExtArgs["result"]["bankWithdrawals"]>
  composites: {}
}

export type BankWithdrawalsGetPayload<S extends boolean | null | undefined | BankWithdrawalsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload, S>

export type BankWithdrawalsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BankWithdrawalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BankWithdrawalsCountAggregateInputType | true
  }

export interface BankWithdrawalsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankWithdrawals'], meta: { name: 'BankWithdrawals' } }
  /**
   * Find zero or one BankWithdrawals that matches the filter.
   * @param {BankWithdrawalsFindUniqueArgs} args - Arguments to find a BankWithdrawals
   * @example
   * // Get one BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BankWithdrawalsFindUniqueArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BankWithdrawals that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BankWithdrawalsFindUniqueOrThrowArgs} args - Arguments to find a BankWithdrawals
   * @example
   * // Get one BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BankWithdrawalsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BankWithdrawals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsFindFirstArgs} args - Arguments to find a BankWithdrawals
   * @example
   * // Get one BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BankWithdrawalsFindFirstArgs>(args?: Prisma.SelectSubset<T, BankWithdrawalsFindFirstArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BankWithdrawals that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsFindFirstOrThrowArgs} args - Arguments to find a BankWithdrawals
   * @example
   * // Get one BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BankWithdrawalsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BankWithdrawalsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BankWithdrawals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.findMany()
   * 
   * // Get first 10 BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bankWithdrawalsWithIdOnly = await prisma.bankWithdrawals.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BankWithdrawalsFindManyArgs>(args?: Prisma.SelectSubset<T, BankWithdrawalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BankWithdrawals.
   * @param {BankWithdrawalsCreateArgs} args - Arguments to create a BankWithdrawals.
   * @example
   * // Create one BankWithdrawals
   * const BankWithdrawals = await prisma.bankWithdrawals.create({
   *   data: {
   *     // ... data to create a BankWithdrawals
   *   }
   * })
   * 
   */
  create<T extends BankWithdrawalsCreateArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsCreateArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BankWithdrawals.
   * @param {BankWithdrawalsCreateManyArgs} args - Arguments to create many BankWithdrawals.
   * @example
   * // Create many BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BankWithdrawalsCreateManyArgs>(args?: Prisma.SelectSubset<T, BankWithdrawalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BankWithdrawals and returns the data saved in the database.
   * @param {BankWithdrawalsCreateManyAndReturnArgs} args - Arguments to create many BankWithdrawals.
   * @example
   * // Create many BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BankWithdrawals and only return the `id`
   * const bankWithdrawalsWithIdOnly = await prisma.bankWithdrawals.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BankWithdrawalsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BankWithdrawalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BankWithdrawals.
   * @param {BankWithdrawalsDeleteArgs} args - Arguments to delete one BankWithdrawals.
   * @example
   * // Delete one BankWithdrawals
   * const BankWithdrawals = await prisma.bankWithdrawals.delete({
   *   where: {
   *     // ... filter to delete one BankWithdrawals
   *   }
   * })
   * 
   */
  delete<T extends BankWithdrawalsDeleteArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsDeleteArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BankWithdrawals.
   * @param {BankWithdrawalsUpdateArgs} args - Arguments to update one BankWithdrawals.
   * @example
   * // Update one BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BankWithdrawalsUpdateArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsUpdateArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BankWithdrawals.
   * @param {BankWithdrawalsDeleteManyArgs} args - Arguments to filter BankWithdrawals to delete.
   * @example
   * // Delete a few BankWithdrawals
   * const { count } = await prisma.bankWithdrawals.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BankWithdrawalsDeleteManyArgs>(args?: Prisma.SelectSubset<T, BankWithdrawalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BankWithdrawals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BankWithdrawalsUpdateManyArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BankWithdrawals and returns the data updated in the database.
   * @param {BankWithdrawalsUpdateManyAndReturnArgs} args - Arguments to update many BankWithdrawals.
   * @example
   * // Update many BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BankWithdrawals and only return the `id`
   * const bankWithdrawalsWithIdOnly = await prisma.bankWithdrawals.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BankWithdrawalsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BankWithdrawals.
   * @param {BankWithdrawalsUpsertArgs} args - Arguments to update or create a BankWithdrawals.
   * @example
   * // Update or create a BankWithdrawals
   * const bankWithdrawals = await prisma.bankWithdrawals.upsert({
   *   create: {
   *     // ... data to create a BankWithdrawals
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BankWithdrawals we want to update
   *   }
   * })
   */
  upsert<T extends BankWithdrawalsUpsertArgs>(args: Prisma.SelectSubset<T, BankWithdrawalsUpsertArgs<ExtArgs>>): Prisma.Prisma__BankWithdrawalsClient<runtime.Types.Result.GetResult<Prisma.$BankWithdrawalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BankWithdrawals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsCountArgs} args - Arguments to filter BankWithdrawals to count.
   * @example
   * // Count the number of BankWithdrawals
   * const count = await prisma.bankWithdrawals.count({
   *   where: {
   *     // ... the filter for the BankWithdrawals we want to count
   *   }
   * })
  **/
  count<T extends BankWithdrawalsCountArgs>(
    args?: Prisma.Subset<T, BankWithdrawalsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BankWithdrawalsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BankWithdrawals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BankWithdrawalsAggregateArgs>(args: Prisma.Subset<T, BankWithdrawalsAggregateArgs>): Prisma.PrismaPromise<GetBankWithdrawalsAggregateType<T>>

  /**
   * Group by BankWithdrawals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankWithdrawalsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BankWithdrawalsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BankWithdrawalsGroupByArgs['orderBy'] }
      : { orderBy?: BankWithdrawalsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BankWithdrawalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankWithdrawalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BankWithdrawals model
 */
readonly fields: BankWithdrawalsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BankWithdrawals.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BankWithdrawalsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.SavedBankAccountsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SavedBankAccountsDefaultArgs<ExtArgs>>): Prisma.Prisma__SavedBankAccountsClient<runtime.Types.Result.GetResult<Prisma.$SavedBankAccountsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BankWithdrawals model
 */
export interface BankWithdrawalsFieldRefs {
  readonly id: Prisma.FieldRef<"BankWithdrawals", 'Int'>
  readonly token: Prisma.FieldRef<"BankWithdrawals", 'String'>
  readonly userId: Prisma.FieldRef<"BankWithdrawals", 'Int'>
  readonly accountId: Prisma.FieldRef<"BankWithdrawals", 'Int'>
  readonly amount: Prisma.FieldRef<"BankWithdrawals", 'Int'>
  readonly net_amount: Prisma.FieldRef<"BankWithdrawals", 'Int'>
  readonly fee: Prisma.FieldRef<"BankWithdrawals", 'Int'>
  readonly gateway: Prisma.FieldRef<"BankWithdrawals", 'WithdrawalOption'>
  readonly status: Prisma.FieldRef<"BankWithdrawals", 'ActionStatus'>
  readonly updatedAt: Prisma.FieldRef<"BankWithdrawals", 'DateTime'>
  readonly startedAt: Prisma.FieldRef<"BankWithdrawals", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BankWithdrawals findUnique
 */
export type BankWithdrawalsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * Filter, which BankWithdrawals to fetch.
   */
  where: Prisma.BankWithdrawalsWhereUniqueInput
}

/**
 * BankWithdrawals findUniqueOrThrow
 */
export type BankWithdrawalsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * Filter, which BankWithdrawals to fetch.
   */
  where: Prisma.BankWithdrawalsWhereUniqueInput
}

/**
 * BankWithdrawals findFirst
 */
export type BankWithdrawalsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * Filter, which BankWithdrawals to fetch.
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankWithdrawals to fetch.
   */
  orderBy?: Prisma.BankWithdrawalsOrderByWithRelationInput | Prisma.BankWithdrawalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BankWithdrawals.
   */
  cursor?: Prisma.BankWithdrawalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankWithdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankWithdrawals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BankWithdrawals.
   */
  distinct?: Prisma.BankWithdrawalsScalarFieldEnum | Prisma.BankWithdrawalsScalarFieldEnum[]
}

/**
 * BankWithdrawals findFirstOrThrow
 */
export type BankWithdrawalsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * Filter, which BankWithdrawals to fetch.
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankWithdrawals to fetch.
   */
  orderBy?: Prisma.BankWithdrawalsOrderByWithRelationInput | Prisma.BankWithdrawalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BankWithdrawals.
   */
  cursor?: Prisma.BankWithdrawalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankWithdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankWithdrawals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BankWithdrawals.
   */
  distinct?: Prisma.BankWithdrawalsScalarFieldEnum | Prisma.BankWithdrawalsScalarFieldEnum[]
}

/**
 * BankWithdrawals findMany
 */
export type BankWithdrawalsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * Filter, which BankWithdrawals to fetch.
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankWithdrawals to fetch.
   */
  orderBy?: Prisma.BankWithdrawalsOrderByWithRelationInput | Prisma.BankWithdrawalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BankWithdrawals.
   */
  cursor?: Prisma.BankWithdrawalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankWithdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankWithdrawals.
   */
  skip?: number
  distinct?: Prisma.BankWithdrawalsScalarFieldEnum | Prisma.BankWithdrawalsScalarFieldEnum[]
}

/**
 * BankWithdrawals create
 */
export type BankWithdrawalsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * The data needed to create a BankWithdrawals.
   */
  data: Prisma.XOR<Prisma.BankWithdrawalsCreateInput, Prisma.BankWithdrawalsUncheckedCreateInput>
}

/**
 * BankWithdrawals createMany
 */
export type BankWithdrawalsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BankWithdrawals.
   */
  data: Prisma.BankWithdrawalsCreateManyInput | Prisma.BankWithdrawalsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BankWithdrawals createManyAndReturn
 */
export type BankWithdrawalsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * The data used to create many BankWithdrawals.
   */
  data: Prisma.BankWithdrawalsCreateManyInput | Prisma.BankWithdrawalsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BankWithdrawals update
 */
export type BankWithdrawalsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * The data needed to update a BankWithdrawals.
   */
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateInput, Prisma.BankWithdrawalsUncheckedUpdateInput>
  /**
   * Choose, which BankWithdrawals to update.
   */
  where: Prisma.BankWithdrawalsWhereUniqueInput
}

/**
 * BankWithdrawals updateMany
 */
export type BankWithdrawalsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BankWithdrawals.
   */
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateManyMutationInput, Prisma.BankWithdrawalsUncheckedUpdateManyInput>
  /**
   * Filter which BankWithdrawals to update
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * Limit how many BankWithdrawals to update.
   */
  limit?: number
}

/**
 * BankWithdrawals updateManyAndReturn
 */
export type BankWithdrawalsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * The data used to update BankWithdrawals.
   */
  data: Prisma.XOR<Prisma.BankWithdrawalsUpdateManyMutationInput, Prisma.BankWithdrawalsUncheckedUpdateManyInput>
  /**
   * Filter which BankWithdrawals to update
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * Limit how many BankWithdrawals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BankWithdrawals upsert
 */
export type BankWithdrawalsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * The filter to search for the BankWithdrawals to update in case it exists.
   */
  where: Prisma.BankWithdrawalsWhereUniqueInput
  /**
   * In case the BankWithdrawals found by the `where` argument doesn't exist, create a new BankWithdrawals with this data.
   */
  create: Prisma.XOR<Prisma.BankWithdrawalsCreateInput, Prisma.BankWithdrawalsUncheckedCreateInput>
  /**
   * In case the BankWithdrawals was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BankWithdrawalsUpdateInput, Prisma.BankWithdrawalsUncheckedUpdateInput>
}

/**
 * BankWithdrawals delete
 */
export type BankWithdrawalsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
  /**
   * Filter which BankWithdrawals to delete.
   */
  where: Prisma.BankWithdrawalsWhereUniqueInput
}

/**
 * BankWithdrawals deleteMany
 */
export type BankWithdrawalsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BankWithdrawals to delete
   */
  where?: Prisma.BankWithdrawalsWhereInput
  /**
   * Limit how many BankWithdrawals to delete.
   */
  limit?: number
}

/**
 * BankWithdrawals without action
 */
export type BankWithdrawalsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankWithdrawals
   */
  select?: Prisma.BankWithdrawalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankWithdrawals
   */
  omit?: Prisma.BankWithdrawalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankWithdrawalsInclude<ExtArgs> | null
}
